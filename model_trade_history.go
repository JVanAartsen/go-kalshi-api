/*
Kalshi API.

This documentation describes Kalshi's REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kalshiAPI

import (
	"encoding/json"
	"time"
)

// TradeHistory struct for TradeHistory
type TradeHistory struct {
	Amount *int64 `json:"amount,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Fee *int64 `json:"fee,omitempty"`
	IsYes *bool `json:"is_yes,omitempty"`
	MarketId *string `json:"market_id,omitempty"`
	MarketTitle *string `json:"market_title,omitempty"`
	Price *int64 `json:"price,omitempty"`
}

// NewTradeHistory instantiates a new TradeHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTradeHistory() *TradeHistory {
	this := TradeHistory{}
	return &this
}

// NewTradeHistoryWithDefaults instantiates a new TradeHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTradeHistoryWithDefaults() *TradeHistory {
	this := TradeHistory{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *TradeHistory) GetAmount() int64 {
	if o == nil || o.Amount == nil {
		var ret int64
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeHistory) GetAmountOk() (*int64, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *TradeHistory) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int64 and assigns it to the Amount field.
func (o *TradeHistory) SetAmount(v int64) {
	o.Amount = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *TradeHistory) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeHistory) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *TradeHistory) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *TradeHistory) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetFee returns the Fee field value if set, zero value otherwise.
func (o *TradeHistory) GetFee() int64 {
	if o == nil || o.Fee == nil {
		var ret int64
		return ret
	}
	return *o.Fee
}

// GetFeeOk returns a tuple with the Fee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeHistory) GetFeeOk() (*int64, bool) {
	if o == nil || o.Fee == nil {
		return nil, false
	}
	return o.Fee, true
}

// HasFee returns a boolean if a field has been set.
func (o *TradeHistory) HasFee() bool {
	if o != nil && o.Fee != nil {
		return true
	}

	return false
}

// SetFee gets a reference to the given int64 and assigns it to the Fee field.
func (o *TradeHistory) SetFee(v int64) {
	o.Fee = &v
}

// GetIsYes returns the IsYes field value if set, zero value otherwise.
func (o *TradeHistory) GetIsYes() bool {
	if o == nil || o.IsYes == nil {
		var ret bool
		return ret
	}
	return *o.IsYes
}

// GetIsYesOk returns a tuple with the IsYes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeHistory) GetIsYesOk() (*bool, bool) {
	if o == nil || o.IsYes == nil {
		return nil, false
	}
	return o.IsYes, true
}

// HasIsYes returns a boolean if a field has been set.
func (o *TradeHistory) HasIsYes() bool {
	if o != nil && o.IsYes != nil {
		return true
	}

	return false
}

// SetIsYes gets a reference to the given bool and assigns it to the IsYes field.
func (o *TradeHistory) SetIsYes(v bool) {
	o.IsYes = &v
}

// GetMarketId returns the MarketId field value if set, zero value otherwise.
func (o *TradeHistory) GetMarketId() string {
	if o == nil || o.MarketId == nil {
		var ret string
		return ret
	}
	return *o.MarketId
}

// GetMarketIdOk returns a tuple with the MarketId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeHistory) GetMarketIdOk() (*string, bool) {
	if o == nil || o.MarketId == nil {
		return nil, false
	}
	return o.MarketId, true
}

// HasMarketId returns a boolean if a field has been set.
func (o *TradeHistory) HasMarketId() bool {
	if o != nil && o.MarketId != nil {
		return true
	}

	return false
}

// SetMarketId gets a reference to the given string and assigns it to the MarketId field.
func (o *TradeHistory) SetMarketId(v string) {
	o.MarketId = &v
}

// GetMarketTitle returns the MarketTitle field value if set, zero value otherwise.
func (o *TradeHistory) GetMarketTitle() string {
	if o == nil || o.MarketTitle == nil {
		var ret string
		return ret
	}
	return *o.MarketTitle
}

// GetMarketTitleOk returns a tuple with the MarketTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeHistory) GetMarketTitleOk() (*string, bool) {
	if o == nil || o.MarketTitle == nil {
		return nil, false
	}
	return o.MarketTitle, true
}

// HasMarketTitle returns a boolean if a field has been set.
func (o *TradeHistory) HasMarketTitle() bool {
	if o != nil && o.MarketTitle != nil {
		return true
	}

	return false
}

// SetMarketTitle gets a reference to the given string and assigns it to the MarketTitle field.
func (o *TradeHistory) SetMarketTitle(v string) {
	o.MarketTitle = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *TradeHistory) GetPrice() int64 {
	if o == nil || o.Price == nil {
		var ret int64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeHistory) GetPriceOk() (*int64, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *TradeHistory) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given int64 and assigns it to the Price field.
func (o *TradeHistory) SetPrice(v int64) {
	o.Price = &v
}

func (o TradeHistory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.Fee != nil {
		toSerialize["fee"] = o.Fee
	}
	if o.IsYes != nil {
		toSerialize["is_yes"] = o.IsYes
	}
	if o.MarketId != nil {
		toSerialize["market_id"] = o.MarketId
	}
	if o.MarketTitle != nil {
		toSerialize["market_title"] = o.MarketTitle
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	return json.Marshal(toSerialize)
}

type NullableTradeHistory struct {
	value *TradeHistory
	isSet bool
}

func (v NullableTradeHistory) Get() *TradeHistory {
	return v.value
}

func (v *NullableTradeHistory) Set(val *TradeHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableTradeHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableTradeHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTradeHistory(val *TradeHistory) *NullableTradeHistory {
	return &NullableTradeHistory{value: val, isSet: true}
}

func (v NullableTradeHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTradeHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Kalshi API.

This documentation describes Kalshi's REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kalshiAPI

import (
	"encoding/json"
)

// RangedMarket struct for RangedMarket
type RangedMarket struct {
	Id *string `json:"id,omitempty"`
	MiniTitle *string `json:"mini_title,omitempty"`
	MutuallyExclusiveSide *string `json:"mutually_exclusive_side,omitempty"`
	Ticker *string `json:"ticker,omitempty"`
	Title *string `json:"title,omitempty"`
}

// NewRangedMarket instantiates a new RangedMarket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRangedMarket() *RangedMarket {
	this := RangedMarket{}
	return &this
}

// NewRangedMarketWithDefaults instantiates a new RangedMarket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRangedMarketWithDefaults() *RangedMarket {
	this := RangedMarket{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RangedMarket) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RangedMarket) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RangedMarket) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RangedMarket) SetId(v string) {
	o.Id = &v
}

// GetMiniTitle returns the MiniTitle field value if set, zero value otherwise.
func (o *RangedMarket) GetMiniTitle() string {
	if o == nil || o.MiniTitle == nil {
		var ret string
		return ret
	}
	return *o.MiniTitle
}

// GetMiniTitleOk returns a tuple with the MiniTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RangedMarket) GetMiniTitleOk() (*string, bool) {
	if o == nil || o.MiniTitle == nil {
		return nil, false
	}
	return o.MiniTitle, true
}

// HasMiniTitle returns a boolean if a field has been set.
func (o *RangedMarket) HasMiniTitle() bool {
	if o != nil && o.MiniTitle != nil {
		return true
	}

	return false
}

// SetMiniTitle gets a reference to the given string and assigns it to the MiniTitle field.
func (o *RangedMarket) SetMiniTitle(v string) {
	o.MiniTitle = &v
}

// GetMutuallyExclusiveSide returns the MutuallyExclusiveSide field value if set, zero value otherwise.
func (o *RangedMarket) GetMutuallyExclusiveSide() string {
	if o == nil || o.MutuallyExclusiveSide == nil {
		var ret string
		return ret
	}
	return *o.MutuallyExclusiveSide
}

// GetMutuallyExclusiveSideOk returns a tuple with the MutuallyExclusiveSide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RangedMarket) GetMutuallyExclusiveSideOk() (*string, bool) {
	if o == nil || o.MutuallyExclusiveSide == nil {
		return nil, false
	}
	return o.MutuallyExclusiveSide, true
}

// HasMutuallyExclusiveSide returns a boolean if a field has been set.
func (o *RangedMarket) HasMutuallyExclusiveSide() bool {
	if o != nil && o.MutuallyExclusiveSide != nil {
		return true
	}

	return false
}

// SetMutuallyExclusiveSide gets a reference to the given string and assigns it to the MutuallyExclusiveSide field.
func (o *RangedMarket) SetMutuallyExclusiveSide(v string) {
	o.MutuallyExclusiveSide = &v
}

// GetTicker returns the Ticker field value if set, zero value otherwise.
func (o *RangedMarket) GetTicker() string {
	if o == nil || o.Ticker == nil {
		var ret string
		return ret
	}
	return *o.Ticker
}

// GetTickerOk returns a tuple with the Ticker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RangedMarket) GetTickerOk() (*string, bool) {
	if o == nil || o.Ticker == nil {
		return nil, false
	}
	return o.Ticker, true
}

// HasTicker returns a boolean if a field has been set.
func (o *RangedMarket) HasTicker() bool {
	if o != nil && o.Ticker != nil {
		return true
	}

	return false
}

// SetTicker gets a reference to the given string and assigns it to the Ticker field.
func (o *RangedMarket) SetTicker(v string) {
	o.Ticker = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *RangedMarket) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RangedMarket) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *RangedMarket) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *RangedMarket) SetTitle(v string) {
	o.Title = &v
}

func (o RangedMarket) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.MiniTitle != nil {
		toSerialize["mini_title"] = o.MiniTitle
	}
	if o.MutuallyExclusiveSide != nil {
		toSerialize["mutually_exclusive_side"] = o.MutuallyExclusiveSide
	}
	if o.Ticker != nil {
		toSerialize["ticker"] = o.Ticker
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	return json.Marshal(toSerialize)
}

type NullableRangedMarket struct {
	value *RangedMarket
	isSet bool
}

func (v NullableRangedMarket) Get() *RangedMarket {
	return v.value
}

func (v *NullableRangedMarket) Set(val *RangedMarket) {
	v.value = val
	v.isSet = true
}

func (v NullableRangedMarket) IsSet() bool {
	return v.isSet
}

func (v *NullableRangedMarket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRangedMarket(val *RangedMarket) *NullableRangedMarket {
	return &NullableRangedMarket{value: val, isSet: true}
}

func (v NullableRangedMarket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRangedMarket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



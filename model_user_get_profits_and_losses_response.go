/*
Kalshi API.

This documentation describes Kalshi's REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kalshiAPI

import (
	"encoding/json"
)

// UserGetProfitsAndLossesResponse struct for UserGetProfitsAndLossesResponse
type UserGetProfitsAndLossesResponse struct {
	// User market transactions (trades and settlements)  in: body
	MarketTransactions []MarketTransaction `json:"market_transactions,omitempty"`
	PnlWithFeesCents *int64 `json:"pnl_with_fees_cents,omitempty"`
	PnlWithoutFeesCents *int64 `json:"pnl_without_fees_cents,omitempty"`
}

// NewUserGetProfitsAndLossesResponse instantiates a new UserGetProfitsAndLossesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserGetProfitsAndLossesResponse() *UserGetProfitsAndLossesResponse {
	this := UserGetProfitsAndLossesResponse{}
	return &this
}

// NewUserGetProfitsAndLossesResponseWithDefaults instantiates a new UserGetProfitsAndLossesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserGetProfitsAndLossesResponseWithDefaults() *UserGetProfitsAndLossesResponse {
	this := UserGetProfitsAndLossesResponse{}
	return &this
}

// GetMarketTransactions returns the MarketTransactions field value if set, zero value otherwise.
func (o *UserGetProfitsAndLossesResponse) GetMarketTransactions() []MarketTransaction {
	if o == nil || o.MarketTransactions == nil {
		var ret []MarketTransaction
		return ret
	}
	return o.MarketTransactions
}

// GetMarketTransactionsOk returns a tuple with the MarketTransactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGetProfitsAndLossesResponse) GetMarketTransactionsOk() ([]MarketTransaction, bool) {
	if o == nil || o.MarketTransactions == nil {
		return nil, false
	}
	return o.MarketTransactions, true
}

// HasMarketTransactions returns a boolean if a field has been set.
func (o *UserGetProfitsAndLossesResponse) HasMarketTransactions() bool {
	if o != nil && o.MarketTransactions != nil {
		return true
	}

	return false
}

// SetMarketTransactions gets a reference to the given []MarketTransaction and assigns it to the MarketTransactions field.
func (o *UserGetProfitsAndLossesResponse) SetMarketTransactions(v []MarketTransaction) {
	o.MarketTransactions = v
}

// GetPnlWithFeesCents returns the PnlWithFeesCents field value if set, zero value otherwise.
func (o *UserGetProfitsAndLossesResponse) GetPnlWithFeesCents() int64 {
	if o == nil || o.PnlWithFeesCents == nil {
		var ret int64
		return ret
	}
	return *o.PnlWithFeesCents
}

// GetPnlWithFeesCentsOk returns a tuple with the PnlWithFeesCents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGetProfitsAndLossesResponse) GetPnlWithFeesCentsOk() (*int64, bool) {
	if o == nil || o.PnlWithFeesCents == nil {
		return nil, false
	}
	return o.PnlWithFeesCents, true
}

// HasPnlWithFeesCents returns a boolean if a field has been set.
func (o *UserGetProfitsAndLossesResponse) HasPnlWithFeesCents() bool {
	if o != nil && o.PnlWithFeesCents != nil {
		return true
	}

	return false
}

// SetPnlWithFeesCents gets a reference to the given int64 and assigns it to the PnlWithFeesCents field.
func (o *UserGetProfitsAndLossesResponse) SetPnlWithFeesCents(v int64) {
	o.PnlWithFeesCents = &v
}

// GetPnlWithoutFeesCents returns the PnlWithoutFeesCents field value if set, zero value otherwise.
func (o *UserGetProfitsAndLossesResponse) GetPnlWithoutFeesCents() int64 {
	if o == nil || o.PnlWithoutFeesCents == nil {
		var ret int64
		return ret
	}
	return *o.PnlWithoutFeesCents
}

// GetPnlWithoutFeesCentsOk returns a tuple with the PnlWithoutFeesCents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGetProfitsAndLossesResponse) GetPnlWithoutFeesCentsOk() (*int64, bool) {
	if o == nil || o.PnlWithoutFeesCents == nil {
		return nil, false
	}
	return o.PnlWithoutFeesCents, true
}

// HasPnlWithoutFeesCents returns a boolean if a field has been set.
func (o *UserGetProfitsAndLossesResponse) HasPnlWithoutFeesCents() bool {
	if o != nil && o.PnlWithoutFeesCents != nil {
		return true
	}

	return false
}

// SetPnlWithoutFeesCents gets a reference to the given int64 and assigns it to the PnlWithoutFeesCents field.
func (o *UserGetProfitsAndLossesResponse) SetPnlWithoutFeesCents(v int64) {
	o.PnlWithoutFeesCents = &v
}

func (o UserGetProfitsAndLossesResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MarketTransactions != nil {
		toSerialize["market_transactions"] = o.MarketTransactions
	}
	if o.PnlWithFeesCents != nil {
		toSerialize["pnl_with_fees_cents"] = o.PnlWithFeesCents
	}
	if o.PnlWithoutFeesCents != nil {
		toSerialize["pnl_without_fees_cents"] = o.PnlWithoutFeesCents
	}
	return json.Marshal(toSerialize)
}

type NullableUserGetProfitsAndLossesResponse struct {
	value *UserGetProfitsAndLossesResponse
	isSet bool
}

func (v NullableUserGetProfitsAndLossesResponse) Get() *UserGetProfitsAndLossesResponse {
	return v.value
}

func (v *NullableUserGetProfitsAndLossesResponse) Set(val *UserGetProfitsAndLossesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserGetProfitsAndLossesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserGetProfitsAndLossesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserGetProfitsAndLossesResponse(val *UserGetProfitsAndLossesResponse) *NullableUserGetProfitsAndLossesResponse {
	return &NullableUserGetProfitsAndLossesResponse{value: val, isSet: true}
}

func (v NullableUserGetProfitsAndLossesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserGetProfitsAndLossesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Kalshi API.

This documentation describes Kalshi's REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kalshiAPI

import (
	"encoding/json"
	"time"
)

// EventData struct for EventData
type EventData struct {
	Category *string `json:"category,omitempty"`
	DescriptionContext *string `json:"description_context,omitempty"`
	Markets []EventChildMarket `json:"markets,omitempty"`
	MetricsTags []string `json:"metrics_tags,omitempty"`
	MinTickSize *string `json:"min_tick_size,omitempty"`
	MiniTitle *string `json:"mini_title,omitempty"`
	MutuallyExclusive *bool `json:"mutually_exclusive,omitempty"`
	MutuallyExclusiveSide *string `json:"mutually_exclusive_side,omitempty"`
	SeriesTicker *string `json:"series_ticker,omitempty"`
	SettleDetails *string `json:"settle_details,omitempty"`
	SettlementSources []SettlementSource `json:"settlement_sources,omitempty"`
	SubTitle *string `json:"sub_title,omitempty"`
	Tags []string `json:"tags,omitempty"`
	TargetDatetime *time.Time `json:"target_datetime,omitempty"`
	Ticker *string `json:"ticker,omitempty"`
	Title *string `json:"title,omitempty"`
	Underlying *string `json:"underlying,omitempty"`
}

// NewEventData instantiates a new EventData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventData() *EventData {
	this := EventData{}
	return &this
}

// NewEventDataWithDefaults instantiates a new EventData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventDataWithDefaults() *EventData {
	this := EventData{}
	return &this
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *EventData) GetCategory() string {
	if o == nil || o.Category == nil {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventData) GetCategoryOk() (*string, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *EventData) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *EventData) SetCategory(v string) {
	o.Category = &v
}

// GetDescriptionContext returns the DescriptionContext field value if set, zero value otherwise.
func (o *EventData) GetDescriptionContext() string {
	if o == nil || o.DescriptionContext == nil {
		var ret string
		return ret
	}
	return *o.DescriptionContext
}

// GetDescriptionContextOk returns a tuple with the DescriptionContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventData) GetDescriptionContextOk() (*string, bool) {
	if o == nil || o.DescriptionContext == nil {
		return nil, false
	}
	return o.DescriptionContext, true
}

// HasDescriptionContext returns a boolean if a field has been set.
func (o *EventData) HasDescriptionContext() bool {
	if o != nil && o.DescriptionContext != nil {
		return true
	}

	return false
}

// SetDescriptionContext gets a reference to the given string and assigns it to the DescriptionContext field.
func (o *EventData) SetDescriptionContext(v string) {
	o.DescriptionContext = &v
}

// GetMarkets returns the Markets field value if set, zero value otherwise.
func (o *EventData) GetMarkets() []EventChildMarket {
	if o == nil || o.Markets == nil {
		var ret []EventChildMarket
		return ret
	}
	return o.Markets
}

// GetMarketsOk returns a tuple with the Markets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventData) GetMarketsOk() ([]EventChildMarket, bool) {
	if o == nil || o.Markets == nil {
		return nil, false
	}
	return o.Markets, true
}

// HasMarkets returns a boolean if a field has been set.
func (o *EventData) HasMarkets() bool {
	if o != nil && o.Markets != nil {
		return true
	}

	return false
}

// SetMarkets gets a reference to the given []EventChildMarket and assigns it to the Markets field.
func (o *EventData) SetMarkets(v []EventChildMarket) {
	o.Markets = v
}

// GetMetricsTags returns the MetricsTags field value if set, zero value otherwise.
func (o *EventData) GetMetricsTags() []string {
	if o == nil || o.MetricsTags == nil {
		var ret []string
		return ret
	}
	return o.MetricsTags
}

// GetMetricsTagsOk returns a tuple with the MetricsTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventData) GetMetricsTagsOk() ([]string, bool) {
	if o == nil || o.MetricsTags == nil {
		return nil, false
	}
	return o.MetricsTags, true
}

// HasMetricsTags returns a boolean if a field has been set.
func (o *EventData) HasMetricsTags() bool {
	if o != nil && o.MetricsTags != nil {
		return true
	}

	return false
}

// SetMetricsTags gets a reference to the given []string and assigns it to the MetricsTags field.
func (o *EventData) SetMetricsTags(v []string) {
	o.MetricsTags = v
}

// GetMinTickSize returns the MinTickSize field value if set, zero value otherwise.
func (o *EventData) GetMinTickSize() string {
	if o == nil || o.MinTickSize == nil {
		var ret string
		return ret
	}
	return *o.MinTickSize
}

// GetMinTickSizeOk returns a tuple with the MinTickSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventData) GetMinTickSizeOk() (*string, bool) {
	if o == nil || o.MinTickSize == nil {
		return nil, false
	}
	return o.MinTickSize, true
}

// HasMinTickSize returns a boolean if a field has been set.
func (o *EventData) HasMinTickSize() bool {
	if o != nil && o.MinTickSize != nil {
		return true
	}

	return false
}

// SetMinTickSize gets a reference to the given string and assigns it to the MinTickSize field.
func (o *EventData) SetMinTickSize(v string) {
	o.MinTickSize = &v
}

// GetMiniTitle returns the MiniTitle field value if set, zero value otherwise.
func (o *EventData) GetMiniTitle() string {
	if o == nil || o.MiniTitle == nil {
		var ret string
		return ret
	}
	return *o.MiniTitle
}

// GetMiniTitleOk returns a tuple with the MiniTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventData) GetMiniTitleOk() (*string, bool) {
	if o == nil || o.MiniTitle == nil {
		return nil, false
	}
	return o.MiniTitle, true
}

// HasMiniTitle returns a boolean if a field has been set.
func (o *EventData) HasMiniTitle() bool {
	if o != nil && o.MiniTitle != nil {
		return true
	}

	return false
}

// SetMiniTitle gets a reference to the given string and assigns it to the MiniTitle field.
func (o *EventData) SetMiniTitle(v string) {
	o.MiniTitle = &v
}

// GetMutuallyExclusive returns the MutuallyExclusive field value if set, zero value otherwise.
func (o *EventData) GetMutuallyExclusive() bool {
	if o == nil || o.MutuallyExclusive == nil {
		var ret bool
		return ret
	}
	return *o.MutuallyExclusive
}

// GetMutuallyExclusiveOk returns a tuple with the MutuallyExclusive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventData) GetMutuallyExclusiveOk() (*bool, bool) {
	if o == nil || o.MutuallyExclusive == nil {
		return nil, false
	}
	return o.MutuallyExclusive, true
}

// HasMutuallyExclusive returns a boolean if a field has been set.
func (o *EventData) HasMutuallyExclusive() bool {
	if o != nil && o.MutuallyExclusive != nil {
		return true
	}

	return false
}

// SetMutuallyExclusive gets a reference to the given bool and assigns it to the MutuallyExclusive field.
func (o *EventData) SetMutuallyExclusive(v bool) {
	o.MutuallyExclusive = &v
}

// GetMutuallyExclusiveSide returns the MutuallyExclusiveSide field value if set, zero value otherwise.
func (o *EventData) GetMutuallyExclusiveSide() string {
	if o == nil || o.MutuallyExclusiveSide == nil {
		var ret string
		return ret
	}
	return *o.MutuallyExclusiveSide
}

// GetMutuallyExclusiveSideOk returns a tuple with the MutuallyExclusiveSide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventData) GetMutuallyExclusiveSideOk() (*string, bool) {
	if o == nil || o.MutuallyExclusiveSide == nil {
		return nil, false
	}
	return o.MutuallyExclusiveSide, true
}

// HasMutuallyExclusiveSide returns a boolean if a field has been set.
func (o *EventData) HasMutuallyExclusiveSide() bool {
	if o != nil && o.MutuallyExclusiveSide != nil {
		return true
	}

	return false
}

// SetMutuallyExclusiveSide gets a reference to the given string and assigns it to the MutuallyExclusiveSide field.
func (o *EventData) SetMutuallyExclusiveSide(v string) {
	o.MutuallyExclusiveSide = &v
}

// GetSeriesTicker returns the SeriesTicker field value if set, zero value otherwise.
func (o *EventData) GetSeriesTicker() string {
	if o == nil || o.SeriesTicker == nil {
		var ret string
		return ret
	}
	return *o.SeriesTicker
}

// GetSeriesTickerOk returns a tuple with the SeriesTicker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventData) GetSeriesTickerOk() (*string, bool) {
	if o == nil || o.SeriesTicker == nil {
		return nil, false
	}
	return o.SeriesTicker, true
}

// HasSeriesTicker returns a boolean if a field has been set.
func (o *EventData) HasSeriesTicker() bool {
	if o != nil && o.SeriesTicker != nil {
		return true
	}

	return false
}

// SetSeriesTicker gets a reference to the given string and assigns it to the SeriesTicker field.
func (o *EventData) SetSeriesTicker(v string) {
	o.SeriesTicker = &v
}

// GetSettleDetails returns the SettleDetails field value if set, zero value otherwise.
func (o *EventData) GetSettleDetails() string {
	if o == nil || o.SettleDetails == nil {
		var ret string
		return ret
	}
	return *o.SettleDetails
}

// GetSettleDetailsOk returns a tuple with the SettleDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventData) GetSettleDetailsOk() (*string, bool) {
	if o == nil || o.SettleDetails == nil {
		return nil, false
	}
	return o.SettleDetails, true
}

// HasSettleDetails returns a boolean if a field has been set.
func (o *EventData) HasSettleDetails() bool {
	if o != nil && o.SettleDetails != nil {
		return true
	}

	return false
}

// SetSettleDetails gets a reference to the given string and assigns it to the SettleDetails field.
func (o *EventData) SetSettleDetails(v string) {
	o.SettleDetails = &v
}

// GetSettlementSources returns the SettlementSources field value if set, zero value otherwise.
func (o *EventData) GetSettlementSources() []SettlementSource {
	if o == nil || o.SettlementSources == nil {
		var ret []SettlementSource
		return ret
	}
	return o.SettlementSources
}

// GetSettlementSourcesOk returns a tuple with the SettlementSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventData) GetSettlementSourcesOk() ([]SettlementSource, bool) {
	if o == nil || o.SettlementSources == nil {
		return nil, false
	}
	return o.SettlementSources, true
}

// HasSettlementSources returns a boolean if a field has been set.
func (o *EventData) HasSettlementSources() bool {
	if o != nil && o.SettlementSources != nil {
		return true
	}

	return false
}

// SetSettlementSources gets a reference to the given []SettlementSource and assigns it to the SettlementSources field.
func (o *EventData) SetSettlementSources(v []SettlementSource) {
	o.SettlementSources = v
}

// GetSubTitle returns the SubTitle field value if set, zero value otherwise.
func (o *EventData) GetSubTitle() string {
	if o == nil || o.SubTitle == nil {
		var ret string
		return ret
	}
	return *o.SubTitle
}

// GetSubTitleOk returns a tuple with the SubTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventData) GetSubTitleOk() (*string, bool) {
	if o == nil || o.SubTitle == nil {
		return nil, false
	}
	return o.SubTitle, true
}

// HasSubTitle returns a boolean if a field has been set.
func (o *EventData) HasSubTitle() bool {
	if o != nil && o.SubTitle != nil {
		return true
	}

	return false
}

// SetSubTitle gets a reference to the given string and assigns it to the SubTitle field.
func (o *EventData) SetSubTitle(v string) {
	o.SubTitle = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *EventData) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventData) GetTagsOk() ([]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *EventData) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *EventData) SetTags(v []string) {
	o.Tags = v
}

// GetTargetDatetime returns the TargetDatetime field value if set, zero value otherwise.
func (o *EventData) GetTargetDatetime() time.Time {
	if o == nil || o.TargetDatetime == nil {
		var ret time.Time
		return ret
	}
	return *o.TargetDatetime
}

// GetTargetDatetimeOk returns a tuple with the TargetDatetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventData) GetTargetDatetimeOk() (*time.Time, bool) {
	if o == nil || o.TargetDatetime == nil {
		return nil, false
	}
	return o.TargetDatetime, true
}

// HasTargetDatetime returns a boolean if a field has been set.
func (o *EventData) HasTargetDatetime() bool {
	if o != nil && o.TargetDatetime != nil {
		return true
	}

	return false
}

// SetTargetDatetime gets a reference to the given time.Time and assigns it to the TargetDatetime field.
func (o *EventData) SetTargetDatetime(v time.Time) {
	o.TargetDatetime = &v
}

// GetTicker returns the Ticker field value if set, zero value otherwise.
func (o *EventData) GetTicker() string {
	if o == nil || o.Ticker == nil {
		var ret string
		return ret
	}
	return *o.Ticker
}

// GetTickerOk returns a tuple with the Ticker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventData) GetTickerOk() (*string, bool) {
	if o == nil || o.Ticker == nil {
		return nil, false
	}
	return o.Ticker, true
}

// HasTicker returns a boolean if a field has been set.
func (o *EventData) HasTicker() bool {
	if o != nil && o.Ticker != nil {
		return true
	}

	return false
}

// SetTicker gets a reference to the given string and assigns it to the Ticker field.
func (o *EventData) SetTicker(v string) {
	o.Ticker = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *EventData) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventData) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *EventData) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *EventData) SetTitle(v string) {
	o.Title = &v
}

// GetUnderlying returns the Underlying field value if set, zero value otherwise.
func (o *EventData) GetUnderlying() string {
	if o == nil || o.Underlying == nil {
		var ret string
		return ret
	}
	return *o.Underlying
}

// GetUnderlyingOk returns a tuple with the Underlying field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventData) GetUnderlyingOk() (*string, bool) {
	if o == nil || o.Underlying == nil {
		return nil, false
	}
	return o.Underlying, true
}

// HasUnderlying returns a boolean if a field has been set.
func (o *EventData) HasUnderlying() bool {
	if o != nil && o.Underlying != nil {
		return true
	}

	return false
}

// SetUnderlying gets a reference to the given string and assigns it to the Underlying field.
func (o *EventData) SetUnderlying(v string) {
	o.Underlying = &v
}

func (o EventData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	if o.DescriptionContext != nil {
		toSerialize["description_context"] = o.DescriptionContext
	}
	if o.Markets != nil {
		toSerialize["markets"] = o.Markets
	}
	if o.MetricsTags != nil {
		toSerialize["metrics_tags"] = o.MetricsTags
	}
	if o.MinTickSize != nil {
		toSerialize["min_tick_size"] = o.MinTickSize
	}
	if o.MiniTitle != nil {
		toSerialize["mini_title"] = o.MiniTitle
	}
	if o.MutuallyExclusive != nil {
		toSerialize["mutually_exclusive"] = o.MutuallyExclusive
	}
	if o.MutuallyExclusiveSide != nil {
		toSerialize["mutually_exclusive_side"] = o.MutuallyExclusiveSide
	}
	if o.SeriesTicker != nil {
		toSerialize["series_ticker"] = o.SeriesTicker
	}
	if o.SettleDetails != nil {
		toSerialize["settle_details"] = o.SettleDetails
	}
	if o.SettlementSources != nil {
		toSerialize["settlement_sources"] = o.SettlementSources
	}
	if o.SubTitle != nil {
		toSerialize["sub_title"] = o.SubTitle
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.TargetDatetime != nil {
		toSerialize["target_datetime"] = o.TargetDatetime
	}
	if o.Ticker != nil {
		toSerialize["ticker"] = o.Ticker
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Underlying != nil {
		toSerialize["underlying"] = o.Underlying
	}
	return json.Marshal(toSerialize)
}

type NullableEventData struct {
	value *EventData
	isSet bool
}

func (v NullableEventData) Get() *EventData {
	return v.value
}

func (v *NullableEventData) Set(val *EventData) {
	v.value = val
	v.isSet = true
}

func (v NullableEventData) IsSet() bool {
	return v.isSet
}

func (v *NullableEventData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventData(val *EventData) *NullableEventData {
	return &NullableEventData{value: val, isSet: true}
}

func (v NullableEventData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



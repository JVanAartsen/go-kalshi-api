/*
Kalshi API.

This documentation describes Kalshi's REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kalshiAPI

import (
	"encoding/json"
)

// UserGetNotificationsResponse struct for UserGetNotificationsResponse
type UserGetNotificationsResponse struct {
	Notifications []Notification `json:"notifications"`
}

// NewUserGetNotificationsResponse instantiates a new UserGetNotificationsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserGetNotificationsResponse(notifications []Notification) *UserGetNotificationsResponse {
	this := UserGetNotificationsResponse{}
	this.Notifications = notifications
	return &this
}

// NewUserGetNotificationsResponseWithDefaults instantiates a new UserGetNotificationsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserGetNotificationsResponseWithDefaults() *UserGetNotificationsResponse {
	this := UserGetNotificationsResponse{}
	return &this
}

// GetNotifications returns the Notifications field value
func (o *UserGetNotificationsResponse) GetNotifications() []Notification {
	if o == nil {
		var ret []Notification
		return ret
	}

	return o.Notifications
}

// GetNotificationsOk returns a tuple with the Notifications field value
// and a boolean to check if the value has been set.
func (o *UserGetNotificationsResponse) GetNotificationsOk() ([]Notification, bool) {
	if o == nil {
		return nil, false
	}
	return o.Notifications, true
}

// SetNotifications sets field value
func (o *UserGetNotificationsResponse) SetNotifications(v []Notification) {
	o.Notifications = v
}

func (o UserGetNotificationsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["notifications"] = o.Notifications
	}
	return json.Marshal(toSerialize)
}

type NullableUserGetNotificationsResponse struct {
	value *UserGetNotificationsResponse
	isSet bool
}

func (v NullableUserGetNotificationsResponse) Get() *UserGetNotificationsResponse {
	return v.value
}

func (v *NullableUserGetNotificationsResponse) Set(val *UserGetNotificationsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserGetNotificationsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserGetNotificationsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserGetNotificationsResponse(val *UserGetNotificationsResponse) *NullableUserGetNotificationsResponse {
	return &NullableUserGetNotificationsResponse{value: val, isSet: true}
}

func (v NullableUserGetNotificationsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserGetNotificationsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



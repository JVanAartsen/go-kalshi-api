/*
Kalshi API.

This documentation describes Kalshi's REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kalshiAPI

import (
	"encoding/json"
)

// FavoritedSeries struct for FavoritedSeries
type FavoritedSeries struct {
	SeriesTickers []string `json:"series_tickers,omitempty"`
}

// NewFavoritedSeries instantiates a new FavoritedSeries object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFavoritedSeries() *FavoritedSeries {
	this := FavoritedSeries{}
	return &this
}

// NewFavoritedSeriesWithDefaults instantiates a new FavoritedSeries object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFavoritedSeriesWithDefaults() *FavoritedSeries {
	this := FavoritedSeries{}
	return &this
}

// GetSeriesTickers returns the SeriesTickers field value if set, zero value otherwise.
func (o *FavoritedSeries) GetSeriesTickers() []string {
	if o == nil || o.SeriesTickers == nil {
		var ret []string
		return ret
	}
	return o.SeriesTickers
}

// GetSeriesTickersOk returns a tuple with the SeriesTickers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FavoritedSeries) GetSeriesTickersOk() ([]string, bool) {
	if o == nil || o.SeriesTickers == nil {
		return nil, false
	}
	return o.SeriesTickers, true
}

// HasSeriesTickers returns a boolean if a field has been set.
func (o *FavoritedSeries) HasSeriesTickers() bool {
	if o != nil && o.SeriesTickers != nil {
		return true
	}

	return false
}

// SetSeriesTickers gets a reference to the given []string and assigns it to the SeriesTickers field.
func (o *FavoritedSeries) SetSeriesTickers(v []string) {
	o.SeriesTickers = v
}

func (o FavoritedSeries) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SeriesTickers != nil {
		toSerialize["series_tickers"] = o.SeriesTickers
	}
	return json.Marshal(toSerialize)
}

type NullableFavoritedSeries struct {
	value *FavoritedSeries
	isSet bool
}

func (v NullableFavoritedSeries) Get() *FavoritedSeries {
	return v.value
}

func (v *NullableFavoritedSeries) Set(val *FavoritedSeries) {
	v.value = val
	v.isSet = true
}

func (v NullableFavoritedSeries) IsSet() bool {
	return v.isSet
}

func (v *NullableFavoritedSeries) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFavoritedSeries(val *FavoritedSeries) *NullableFavoritedSeries {
	return &NullableFavoritedSeries{value: val, isSet: true}
}

func (v NullableFavoritedSeries) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFavoritedSeries) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Kalshi API.

This documentation describes Kalshi's REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kalshiAPI

import (
	"encoding/json"
)

// Watchlist Watchlist is the list of markets that you have some activity on, this is used mostly by the UI.
type Watchlist struct {
	MarketIds []string `json:"market_ids,omitempty"`
}

// NewWatchlist instantiates a new Watchlist object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWatchlist() *Watchlist {
	this := Watchlist{}
	return &this
}

// NewWatchlistWithDefaults instantiates a new Watchlist object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWatchlistWithDefaults() *Watchlist {
	this := Watchlist{}
	return &this
}

// GetMarketIds returns the MarketIds field value if set, zero value otherwise.
func (o *Watchlist) GetMarketIds() []string {
	if o == nil || o.MarketIds == nil {
		var ret []string
		return ret
	}
	return o.MarketIds
}

// GetMarketIdsOk returns a tuple with the MarketIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Watchlist) GetMarketIdsOk() ([]string, bool) {
	if o == nil || o.MarketIds == nil {
		return nil, false
	}
	return o.MarketIds, true
}

// HasMarketIds returns a boolean if a field has been set.
func (o *Watchlist) HasMarketIds() bool {
	if o != nil && o.MarketIds != nil {
		return true
	}

	return false
}

// SetMarketIds gets a reference to the given []string and assigns it to the MarketIds field.
func (o *Watchlist) SetMarketIds(v []string) {
	o.MarketIds = v
}

func (o Watchlist) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MarketIds != nil {
		toSerialize["market_ids"] = o.MarketIds
	}
	return json.Marshal(toSerialize)
}

type NullableWatchlist struct {
	value *Watchlist
	isSet bool
}

func (v NullableWatchlist) Get() *Watchlist {
	return v.value
}

func (v *NullableWatchlist) Set(val *Watchlist) {
	v.value = val
	v.isSet = true
}

func (v NullableWatchlist) IsSet() bool {
	return v.isSet
}

func (v *NullableWatchlist) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWatchlist(val *Watchlist) *NullableWatchlist {
	return &NullableWatchlist{value: val, isSet: true}
}

func (v NullableWatchlist) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWatchlist) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Kalshi API.

This documentation describes Kalshi's REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kalshiAPI

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


type UsersApi interface {

	/*
	GetUserImmediateFunding GetUserImmediateFunding

	End-point for getting immediate funding info for a member.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId This parameter should be filled with your user_id provided on log_in
	@return ApiGetUserImmediateFundingRequest
	*/
	GetUserImmediateFunding(ctx context.Context, userId string) ApiGetUserImmediateFundingRequest

	// GetUserImmediateFundingExecute executes the request
	//  @return GetUserImmediateFundingResponse
	GetUserImmediateFundingExecute(r ApiGetUserImmediateFundingRequest) (*GetUserImmediateFundingResponse, *http.Response, error)

	/*
	GetUserWithdrawalAvailableBalance GetUserWithdrawalAvailableBalance

	End-point for getting how much money a member is elgible to withdraw

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId This parameter should be filled with your user_id provided on log_in
	@return ApiGetUserWithdrawalAvailableBalanceRequest
	*/
	GetUserWithdrawalAvailableBalance(ctx context.Context, userId string) ApiGetUserWithdrawalAvailableBalanceRequest

	// GetUserWithdrawalAvailableBalanceExecute executes the request
	//  @return UserWithdrawalAvailableBalanceResponse
	GetUserWithdrawalAvailableBalanceExecute(r ApiGetUserWithdrawalAvailableBalanceRequest) (*UserWithdrawalAvailableBalanceResponse, *http.Response, error)
}

// UsersApiService UsersApi service
type UsersApiService service

type ApiGetUserImmediateFundingRequest struct {
	ctx context.Context
	ApiService UsersApi
	userId string
	depositAmountCents *int64
}

// Pass this parameter if you&#39;d like to see how much of a deposit will be funded by immediate funding. If you don&#39;t need this information, pass 0 cents.
func (r ApiGetUserImmediateFundingRequest) DepositAmountCents(depositAmountCents int64) ApiGetUserImmediateFundingRequest {
	r.depositAmountCents = &depositAmountCents
	return r
}

func (r ApiGetUserImmediateFundingRequest) Execute() (*GetUserImmediateFundingResponse, *http.Response, error) {
	return r.ApiService.GetUserImmediateFundingExecute(r)
}

/*
GetUserImmediateFunding GetUserImmediateFunding

End-point for getting immediate funding info for a member.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId This parameter should be filled with your user_id provided on log_in
 @return ApiGetUserImmediateFundingRequest
*/
func (a *UsersApiService) GetUserImmediateFunding(ctx context.Context, userId string) ApiGetUserImmediateFundingRequest {
	return ApiGetUserImmediateFundingRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return GetUserImmediateFundingResponse
func (a *UsersApiService) GetUserImmediateFundingExecute(r ApiGetUserImmediateFundingRequest) (*GetUserImmediateFundingResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetUserImmediateFundingResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersApiService.GetUserImmediateFunding")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/immediate_funding"
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.depositAmountCents != nil {
		localVarQueryParams.Add("DepositAmountCents", parameterToString(*r.depositAmountCents, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["cookie"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUserWithdrawalAvailableBalanceRequest struct {
	ctx context.Context
	ApiService UsersApi
	userId string
}

func (r ApiGetUserWithdrawalAvailableBalanceRequest) Execute() (*UserWithdrawalAvailableBalanceResponse, *http.Response, error) {
	return r.ApiService.GetUserWithdrawalAvailableBalanceExecute(r)
}

/*
GetUserWithdrawalAvailableBalance GetUserWithdrawalAvailableBalance

End-point for getting how much money a member is elgible to withdraw

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId This parameter should be filled with your user_id provided on log_in
 @return ApiGetUserWithdrawalAvailableBalanceRequest
*/
func (a *UsersApiService) GetUserWithdrawalAvailableBalance(ctx context.Context, userId string) ApiGetUserWithdrawalAvailableBalanceRequest {
	return ApiGetUserWithdrawalAvailableBalanceRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return UserWithdrawalAvailableBalanceResponse
func (a *UsersApiService) GetUserWithdrawalAvailableBalanceExecute(r ApiGetUserWithdrawalAvailableBalanceRequest) (*UserWithdrawalAvailableBalanceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserWithdrawalAvailableBalanceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersApiService.GetUserWithdrawalAvailableBalance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/withdrawals/available"
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["cookie"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

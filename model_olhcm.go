/*
Kalshi API.

This documentation describes Kalshi's REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kalshiAPI

import (
	"encoding/json"
)

// OLHCM struct for OLHCM
type OLHCM struct {
	Close *int64 `json:"close,omitempty"`
	High *int64 `json:"high,omitempty"`
	Low *int64 `json:"low,omitempty"`
	Mean *int64 `json:"mean,omitempty"`
	Open *int64 `json:"open,omitempty"`
}

// NewOLHCM instantiates a new OLHCM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOLHCM() *OLHCM {
	this := OLHCM{}
	return &this
}

// NewOLHCMWithDefaults instantiates a new OLHCM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOLHCMWithDefaults() *OLHCM {
	this := OLHCM{}
	return &this
}

// GetClose returns the Close field value if set, zero value otherwise.
func (o *OLHCM) GetClose() int64 {
	if o == nil || o.Close == nil {
		var ret int64
		return ret
	}
	return *o.Close
}

// GetCloseOk returns a tuple with the Close field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OLHCM) GetCloseOk() (*int64, bool) {
	if o == nil || o.Close == nil {
		return nil, false
	}
	return o.Close, true
}

// HasClose returns a boolean if a field has been set.
func (o *OLHCM) HasClose() bool {
	if o != nil && o.Close != nil {
		return true
	}

	return false
}

// SetClose gets a reference to the given int64 and assigns it to the Close field.
func (o *OLHCM) SetClose(v int64) {
	o.Close = &v
}

// GetHigh returns the High field value if set, zero value otherwise.
func (o *OLHCM) GetHigh() int64 {
	if o == nil || o.High == nil {
		var ret int64
		return ret
	}
	return *o.High
}

// GetHighOk returns a tuple with the High field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OLHCM) GetHighOk() (*int64, bool) {
	if o == nil || o.High == nil {
		return nil, false
	}
	return o.High, true
}

// HasHigh returns a boolean if a field has been set.
func (o *OLHCM) HasHigh() bool {
	if o != nil && o.High != nil {
		return true
	}

	return false
}

// SetHigh gets a reference to the given int64 and assigns it to the High field.
func (o *OLHCM) SetHigh(v int64) {
	o.High = &v
}

// GetLow returns the Low field value if set, zero value otherwise.
func (o *OLHCM) GetLow() int64 {
	if o == nil || o.Low == nil {
		var ret int64
		return ret
	}
	return *o.Low
}

// GetLowOk returns a tuple with the Low field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OLHCM) GetLowOk() (*int64, bool) {
	if o == nil || o.Low == nil {
		return nil, false
	}
	return o.Low, true
}

// HasLow returns a boolean if a field has been set.
func (o *OLHCM) HasLow() bool {
	if o != nil && o.Low != nil {
		return true
	}

	return false
}

// SetLow gets a reference to the given int64 and assigns it to the Low field.
func (o *OLHCM) SetLow(v int64) {
	o.Low = &v
}

// GetMean returns the Mean field value if set, zero value otherwise.
func (o *OLHCM) GetMean() int64 {
	if o == nil || o.Mean == nil {
		var ret int64
		return ret
	}
	return *o.Mean
}

// GetMeanOk returns a tuple with the Mean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OLHCM) GetMeanOk() (*int64, bool) {
	if o == nil || o.Mean == nil {
		return nil, false
	}
	return o.Mean, true
}

// HasMean returns a boolean if a field has been set.
func (o *OLHCM) HasMean() bool {
	if o != nil && o.Mean != nil {
		return true
	}

	return false
}

// SetMean gets a reference to the given int64 and assigns it to the Mean field.
func (o *OLHCM) SetMean(v int64) {
	o.Mean = &v
}

// GetOpen returns the Open field value if set, zero value otherwise.
func (o *OLHCM) GetOpen() int64 {
	if o == nil || o.Open == nil {
		var ret int64
		return ret
	}
	return *o.Open
}

// GetOpenOk returns a tuple with the Open field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OLHCM) GetOpenOk() (*int64, bool) {
	if o == nil || o.Open == nil {
		return nil, false
	}
	return o.Open, true
}

// HasOpen returns a boolean if a field has been set.
func (o *OLHCM) HasOpen() bool {
	if o != nil && o.Open != nil {
		return true
	}

	return false
}

// SetOpen gets a reference to the given int64 and assigns it to the Open field.
func (o *OLHCM) SetOpen(v int64) {
	o.Open = &v
}

func (o OLHCM) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Close != nil {
		toSerialize["close"] = o.Close
	}
	if o.High != nil {
		toSerialize["high"] = o.High
	}
	if o.Low != nil {
		toSerialize["low"] = o.Low
	}
	if o.Mean != nil {
		toSerialize["mean"] = o.Mean
	}
	if o.Open != nil {
		toSerialize["open"] = o.Open
	}
	return json.Marshal(toSerialize)
}

type NullableOLHCM struct {
	value *OLHCM
	isSet bool
}

func (v NullableOLHCM) Get() *OLHCM {
	return v.value
}

func (v *NullableOLHCM) Set(val *OLHCM) {
	v.value = val
	v.isSet = true
}

func (v NullableOLHCM) IsSet() bool {
	return v.isSet
}

func (v *NullableOLHCM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOLHCM(val *OLHCM) *NullableOLHCM {
	return &NullableOLHCM{value: val, isSet: true}
}

func (v NullableOLHCM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOLHCM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



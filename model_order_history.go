/*
Kalshi API.

This documentation describes Kalshi's REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kalshiAPI

import (
	"encoding/json"
	"time"
)

// OrderHistory struct for OrderHistory
type OrderHistory struct {
	CanceledCount *int64 `json:"canceled_count,omitempty"`
	CloseCancelCount *int64 `json:"close_cancel_count,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	FccCanceledCount *int64 `json:"fcc_canceled_count,omitempty"`
	FilledCount *int64 `json:"filled_count,omitempty"`
	IsYes *bool `json:"is_yes,omitempty"`
	MarketId *string `json:"market_id,omitempty"`
	MarketTitle *string `json:"market_title,omitempty"`
	OriginalCount *int64 `json:"original_count,omitempty"`
	Price *int64 `json:"price,omitempty"`
	RemainingCount *int64 `json:"remaining_count,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewOrderHistory instantiates a new OrderHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderHistory() *OrderHistory {
	this := OrderHistory{}
	return &this
}

// NewOrderHistoryWithDefaults instantiates a new OrderHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderHistoryWithDefaults() *OrderHistory {
	this := OrderHistory{}
	return &this
}

// GetCanceledCount returns the CanceledCount field value if set, zero value otherwise.
func (o *OrderHistory) GetCanceledCount() int64 {
	if o == nil || o.CanceledCount == nil {
		var ret int64
		return ret
	}
	return *o.CanceledCount
}

// GetCanceledCountOk returns a tuple with the CanceledCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderHistory) GetCanceledCountOk() (*int64, bool) {
	if o == nil || o.CanceledCount == nil {
		return nil, false
	}
	return o.CanceledCount, true
}

// HasCanceledCount returns a boolean if a field has been set.
func (o *OrderHistory) HasCanceledCount() bool {
	if o != nil && o.CanceledCount != nil {
		return true
	}

	return false
}

// SetCanceledCount gets a reference to the given int64 and assigns it to the CanceledCount field.
func (o *OrderHistory) SetCanceledCount(v int64) {
	o.CanceledCount = &v
}

// GetCloseCancelCount returns the CloseCancelCount field value if set, zero value otherwise.
func (o *OrderHistory) GetCloseCancelCount() int64 {
	if o == nil || o.CloseCancelCount == nil {
		var ret int64
		return ret
	}
	return *o.CloseCancelCount
}

// GetCloseCancelCountOk returns a tuple with the CloseCancelCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderHistory) GetCloseCancelCountOk() (*int64, bool) {
	if o == nil || o.CloseCancelCount == nil {
		return nil, false
	}
	return o.CloseCancelCount, true
}

// HasCloseCancelCount returns a boolean if a field has been set.
func (o *OrderHistory) HasCloseCancelCount() bool {
	if o != nil && o.CloseCancelCount != nil {
		return true
	}

	return false
}

// SetCloseCancelCount gets a reference to the given int64 and assigns it to the CloseCancelCount field.
func (o *OrderHistory) SetCloseCancelCount(v int64) {
	o.CloseCancelCount = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *OrderHistory) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderHistory) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *OrderHistory) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *OrderHistory) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetFccCanceledCount returns the FccCanceledCount field value if set, zero value otherwise.
func (o *OrderHistory) GetFccCanceledCount() int64 {
	if o == nil || o.FccCanceledCount == nil {
		var ret int64
		return ret
	}
	return *o.FccCanceledCount
}

// GetFccCanceledCountOk returns a tuple with the FccCanceledCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderHistory) GetFccCanceledCountOk() (*int64, bool) {
	if o == nil || o.FccCanceledCount == nil {
		return nil, false
	}
	return o.FccCanceledCount, true
}

// HasFccCanceledCount returns a boolean if a field has been set.
func (o *OrderHistory) HasFccCanceledCount() bool {
	if o != nil && o.FccCanceledCount != nil {
		return true
	}

	return false
}

// SetFccCanceledCount gets a reference to the given int64 and assigns it to the FccCanceledCount field.
func (o *OrderHistory) SetFccCanceledCount(v int64) {
	o.FccCanceledCount = &v
}

// GetFilledCount returns the FilledCount field value if set, zero value otherwise.
func (o *OrderHistory) GetFilledCount() int64 {
	if o == nil || o.FilledCount == nil {
		var ret int64
		return ret
	}
	return *o.FilledCount
}

// GetFilledCountOk returns a tuple with the FilledCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderHistory) GetFilledCountOk() (*int64, bool) {
	if o == nil || o.FilledCount == nil {
		return nil, false
	}
	return o.FilledCount, true
}

// HasFilledCount returns a boolean if a field has been set.
func (o *OrderHistory) HasFilledCount() bool {
	if o != nil && o.FilledCount != nil {
		return true
	}

	return false
}

// SetFilledCount gets a reference to the given int64 and assigns it to the FilledCount field.
func (o *OrderHistory) SetFilledCount(v int64) {
	o.FilledCount = &v
}

// GetIsYes returns the IsYes field value if set, zero value otherwise.
func (o *OrderHistory) GetIsYes() bool {
	if o == nil || o.IsYes == nil {
		var ret bool
		return ret
	}
	return *o.IsYes
}

// GetIsYesOk returns a tuple with the IsYes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderHistory) GetIsYesOk() (*bool, bool) {
	if o == nil || o.IsYes == nil {
		return nil, false
	}
	return o.IsYes, true
}

// HasIsYes returns a boolean if a field has been set.
func (o *OrderHistory) HasIsYes() bool {
	if o != nil && o.IsYes != nil {
		return true
	}

	return false
}

// SetIsYes gets a reference to the given bool and assigns it to the IsYes field.
func (o *OrderHistory) SetIsYes(v bool) {
	o.IsYes = &v
}

// GetMarketId returns the MarketId field value if set, zero value otherwise.
func (o *OrderHistory) GetMarketId() string {
	if o == nil || o.MarketId == nil {
		var ret string
		return ret
	}
	return *o.MarketId
}

// GetMarketIdOk returns a tuple with the MarketId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderHistory) GetMarketIdOk() (*string, bool) {
	if o == nil || o.MarketId == nil {
		return nil, false
	}
	return o.MarketId, true
}

// HasMarketId returns a boolean if a field has been set.
func (o *OrderHistory) HasMarketId() bool {
	if o != nil && o.MarketId != nil {
		return true
	}

	return false
}

// SetMarketId gets a reference to the given string and assigns it to the MarketId field.
func (o *OrderHistory) SetMarketId(v string) {
	o.MarketId = &v
}

// GetMarketTitle returns the MarketTitle field value if set, zero value otherwise.
func (o *OrderHistory) GetMarketTitle() string {
	if o == nil || o.MarketTitle == nil {
		var ret string
		return ret
	}
	return *o.MarketTitle
}

// GetMarketTitleOk returns a tuple with the MarketTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderHistory) GetMarketTitleOk() (*string, bool) {
	if o == nil || o.MarketTitle == nil {
		return nil, false
	}
	return o.MarketTitle, true
}

// HasMarketTitle returns a boolean if a field has been set.
func (o *OrderHistory) HasMarketTitle() bool {
	if o != nil && o.MarketTitle != nil {
		return true
	}

	return false
}

// SetMarketTitle gets a reference to the given string and assigns it to the MarketTitle field.
func (o *OrderHistory) SetMarketTitle(v string) {
	o.MarketTitle = &v
}

// GetOriginalCount returns the OriginalCount field value if set, zero value otherwise.
func (o *OrderHistory) GetOriginalCount() int64 {
	if o == nil || o.OriginalCount == nil {
		var ret int64
		return ret
	}
	return *o.OriginalCount
}

// GetOriginalCountOk returns a tuple with the OriginalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderHistory) GetOriginalCountOk() (*int64, bool) {
	if o == nil || o.OriginalCount == nil {
		return nil, false
	}
	return o.OriginalCount, true
}

// HasOriginalCount returns a boolean if a field has been set.
func (o *OrderHistory) HasOriginalCount() bool {
	if o != nil && o.OriginalCount != nil {
		return true
	}

	return false
}

// SetOriginalCount gets a reference to the given int64 and assigns it to the OriginalCount field.
func (o *OrderHistory) SetOriginalCount(v int64) {
	o.OriginalCount = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *OrderHistory) GetPrice() int64 {
	if o == nil || o.Price == nil {
		var ret int64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderHistory) GetPriceOk() (*int64, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *OrderHistory) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given int64 and assigns it to the Price field.
func (o *OrderHistory) SetPrice(v int64) {
	o.Price = &v
}

// GetRemainingCount returns the RemainingCount field value if set, zero value otherwise.
func (o *OrderHistory) GetRemainingCount() int64 {
	if o == nil || o.RemainingCount == nil {
		var ret int64
		return ret
	}
	return *o.RemainingCount
}

// GetRemainingCountOk returns a tuple with the RemainingCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderHistory) GetRemainingCountOk() (*int64, bool) {
	if o == nil || o.RemainingCount == nil {
		return nil, false
	}
	return o.RemainingCount, true
}

// HasRemainingCount returns a boolean if a field has been set.
func (o *OrderHistory) HasRemainingCount() bool {
	if o != nil && o.RemainingCount != nil {
		return true
	}

	return false
}

// SetRemainingCount gets a reference to the given int64 and assigns it to the RemainingCount field.
func (o *OrderHistory) SetRemainingCount(v int64) {
	o.RemainingCount = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *OrderHistory) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderHistory) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *OrderHistory) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *OrderHistory) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o OrderHistory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CanceledCount != nil {
		toSerialize["canceled_count"] = o.CanceledCount
	}
	if o.CloseCancelCount != nil {
		toSerialize["close_cancel_count"] = o.CloseCancelCount
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.FccCanceledCount != nil {
		toSerialize["fcc_canceled_count"] = o.FccCanceledCount
	}
	if o.FilledCount != nil {
		toSerialize["filled_count"] = o.FilledCount
	}
	if o.IsYes != nil {
		toSerialize["is_yes"] = o.IsYes
	}
	if o.MarketId != nil {
		toSerialize["market_id"] = o.MarketId
	}
	if o.MarketTitle != nil {
		toSerialize["market_title"] = o.MarketTitle
	}
	if o.OriginalCount != nil {
		toSerialize["original_count"] = o.OriginalCount
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.RemainingCount != nil {
		toSerialize["remaining_count"] = o.RemainingCount
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableOrderHistory struct {
	value *OrderHistory
	isSet bool
}

func (v NullableOrderHistory) Get() *OrderHistory {
	return v.value
}

func (v *NullableOrderHistory) Set(val *OrderHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderHistory(val *OrderHistory) *NullableOrderHistory {
	return &NullableOrderHistory{value: val, isSet: true}
}

func (v NullableOrderHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



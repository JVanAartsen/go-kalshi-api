/*
Kalshi API.

This documentation describes Kalshi's REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kalshiAPI

import (
	"encoding/json"
	"time"
)

// EventChildMarket struct for EventChildMarket
type EventChildMarket struct {
	CanCloseEarly *bool `json:"can_close_early,omitempty"`
	CloseDate *time.Time `json:"close_date,omitempty"`
	CloseUnconfirmed *bool `json:"close_unconfirmed,omitempty"`
	CreateDate *time.Time `json:"create_date,omitempty"`
	DollarOpenInterest *int64 `json:"dollar_open_interest,omitempty"`
	DollarRecentVolume *int64 `json:"dollar_recent_volume,omitempty"`
	DollarVolume *int64 `json:"dollar_volume,omitempty"`
	ExpirationDate *time.Time `json:"expiration_date,omitempty"`
	ExpirationValue *string `json:"expiration_value,omitempty"`
	Id *string `json:"id,omitempty"`
	LastPrice *int64 `json:"last_price,omitempty"`
	Liquidity *int64 `json:"liquidity,omitempty"`
	ListDate *time.Time `json:"list_date,omitempty"`
	MiniTitle *string `json:"mini_title,omitempty"`
	OpenDate *time.Time `json:"open_date,omitempty"`
	OpenInterest *int64 `json:"open_interest,omitempty"`
	PreviousPrice *int64 `json:"previous_price,omitempty"`
	PreviousYesAsk *int64 `json:"previous_yes_ask,omitempty"`
	PreviousYesBid *int64 `json:"previous_yes_bid,omitempty"`
	RecentVolume *int64 `json:"recent_volume,omitempty"`
	Result *string `json:"result,omitempty"`
	RulebookVariables *map[string]string `json:"rulebook_variables,omitempty"`
	Status *string `json:"status,omitempty"`
	SubTitle *string `json:"sub_title,omitempty"`
	TickerName *string `json:"ticker_name,omitempty"`
	Title *string `json:"title,omitempty"`
	Volume *int64 `json:"volume,omitempty"`
	YesAsk *int64 `json:"yes_ask,omitempty"`
	YesBid *int64 `json:"yes_bid,omitempty"`
}

// NewEventChildMarket instantiates a new EventChildMarket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventChildMarket() *EventChildMarket {
	this := EventChildMarket{}
	return &this
}

// NewEventChildMarketWithDefaults instantiates a new EventChildMarket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventChildMarketWithDefaults() *EventChildMarket {
	this := EventChildMarket{}
	return &this
}

// GetCanCloseEarly returns the CanCloseEarly field value if set, zero value otherwise.
func (o *EventChildMarket) GetCanCloseEarly() bool {
	if o == nil || o.CanCloseEarly == nil {
		var ret bool
		return ret
	}
	return *o.CanCloseEarly
}

// GetCanCloseEarlyOk returns a tuple with the CanCloseEarly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChildMarket) GetCanCloseEarlyOk() (*bool, bool) {
	if o == nil || o.CanCloseEarly == nil {
		return nil, false
	}
	return o.CanCloseEarly, true
}

// HasCanCloseEarly returns a boolean if a field has been set.
func (o *EventChildMarket) HasCanCloseEarly() bool {
	if o != nil && o.CanCloseEarly != nil {
		return true
	}

	return false
}

// SetCanCloseEarly gets a reference to the given bool and assigns it to the CanCloseEarly field.
func (o *EventChildMarket) SetCanCloseEarly(v bool) {
	o.CanCloseEarly = &v
}

// GetCloseDate returns the CloseDate field value if set, zero value otherwise.
func (o *EventChildMarket) GetCloseDate() time.Time {
	if o == nil || o.CloseDate == nil {
		var ret time.Time
		return ret
	}
	return *o.CloseDate
}

// GetCloseDateOk returns a tuple with the CloseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChildMarket) GetCloseDateOk() (*time.Time, bool) {
	if o == nil || o.CloseDate == nil {
		return nil, false
	}
	return o.CloseDate, true
}

// HasCloseDate returns a boolean if a field has been set.
func (o *EventChildMarket) HasCloseDate() bool {
	if o != nil && o.CloseDate != nil {
		return true
	}

	return false
}

// SetCloseDate gets a reference to the given time.Time and assigns it to the CloseDate field.
func (o *EventChildMarket) SetCloseDate(v time.Time) {
	o.CloseDate = &v
}

// GetCloseUnconfirmed returns the CloseUnconfirmed field value if set, zero value otherwise.
func (o *EventChildMarket) GetCloseUnconfirmed() bool {
	if o == nil || o.CloseUnconfirmed == nil {
		var ret bool
		return ret
	}
	return *o.CloseUnconfirmed
}

// GetCloseUnconfirmedOk returns a tuple with the CloseUnconfirmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChildMarket) GetCloseUnconfirmedOk() (*bool, bool) {
	if o == nil || o.CloseUnconfirmed == nil {
		return nil, false
	}
	return o.CloseUnconfirmed, true
}

// HasCloseUnconfirmed returns a boolean if a field has been set.
func (o *EventChildMarket) HasCloseUnconfirmed() bool {
	if o != nil && o.CloseUnconfirmed != nil {
		return true
	}

	return false
}

// SetCloseUnconfirmed gets a reference to the given bool and assigns it to the CloseUnconfirmed field.
func (o *EventChildMarket) SetCloseUnconfirmed(v bool) {
	o.CloseUnconfirmed = &v
}

// GetCreateDate returns the CreateDate field value if set, zero value otherwise.
func (o *EventChildMarket) GetCreateDate() time.Time {
	if o == nil || o.CreateDate == nil {
		var ret time.Time
		return ret
	}
	return *o.CreateDate
}

// GetCreateDateOk returns a tuple with the CreateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChildMarket) GetCreateDateOk() (*time.Time, bool) {
	if o == nil || o.CreateDate == nil {
		return nil, false
	}
	return o.CreateDate, true
}

// HasCreateDate returns a boolean if a field has been set.
func (o *EventChildMarket) HasCreateDate() bool {
	if o != nil && o.CreateDate != nil {
		return true
	}

	return false
}

// SetCreateDate gets a reference to the given time.Time and assigns it to the CreateDate field.
func (o *EventChildMarket) SetCreateDate(v time.Time) {
	o.CreateDate = &v
}

// GetDollarOpenInterest returns the DollarOpenInterest field value if set, zero value otherwise.
func (o *EventChildMarket) GetDollarOpenInterest() int64 {
	if o == nil || o.DollarOpenInterest == nil {
		var ret int64
		return ret
	}
	return *o.DollarOpenInterest
}

// GetDollarOpenInterestOk returns a tuple with the DollarOpenInterest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChildMarket) GetDollarOpenInterestOk() (*int64, bool) {
	if o == nil || o.DollarOpenInterest == nil {
		return nil, false
	}
	return o.DollarOpenInterest, true
}

// HasDollarOpenInterest returns a boolean if a field has been set.
func (o *EventChildMarket) HasDollarOpenInterest() bool {
	if o != nil && o.DollarOpenInterest != nil {
		return true
	}

	return false
}

// SetDollarOpenInterest gets a reference to the given int64 and assigns it to the DollarOpenInterest field.
func (o *EventChildMarket) SetDollarOpenInterest(v int64) {
	o.DollarOpenInterest = &v
}

// GetDollarRecentVolume returns the DollarRecentVolume field value if set, zero value otherwise.
func (o *EventChildMarket) GetDollarRecentVolume() int64 {
	if o == nil || o.DollarRecentVolume == nil {
		var ret int64
		return ret
	}
	return *o.DollarRecentVolume
}

// GetDollarRecentVolumeOk returns a tuple with the DollarRecentVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChildMarket) GetDollarRecentVolumeOk() (*int64, bool) {
	if o == nil || o.DollarRecentVolume == nil {
		return nil, false
	}
	return o.DollarRecentVolume, true
}

// HasDollarRecentVolume returns a boolean if a field has been set.
func (o *EventChildMarket) HasDollarRecentVolume() bool {
	if o != nil && o.DollarRecentVolume != nil {
		return true
	}

	return false
}

// SetDollarRecentVolume gets a reference to the given int64 and assigns it to the DollarRecentVolume field.
func (o *EventChildMarket) SetDollarRecentVolume(v int64) {
	o.DollarRecentVolume = &v
}

// GetDollarVolume returns the DollarVolume field value if set, zero value otherwise.
func (o *EventChildMarket) GetDollarVolume() int64 {
	if o == nil || o.DollarVolume == nil {
		var ret int64
		return ret
	}
	return *o.DollarVolume
}

// GetDollarVolumeOk returns a tuple with the DollarVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChildMarket) GetDollarVolumeOk() (*int64, bool) {
	if o == nil || o.DollarVolume == nil {
		return nil, false
	}
	return o.DollarVolume, true
}

// HasDollarVolume returns a boolean if a field has been set.
func (o *EventChildMarket) HasDollarVolume() bool {
	if o != nil && o.DollarVolume != nil {
		return true
	}

	return false
}

// SetDollarVolume gets a reference to the given int64 and assigns it to the DollarVolume field.
func (o *EventChildMarket) SetDollarVolume(v int64) {
	o.DollarVolume = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *EventChildMarket) GetExpirationDate() time.Time {
	if o == nil || o.ExpirationDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChildMarket) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil || o.ExpirationDate == nil {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *EventChildMarket) HasExpirationDate() bool {
	if o != nil && o.ExpirationDate != nil {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given time.Time and assigns it to the ExpirationDate field.
func (o *EventChildMarket) SetExpirationDate(v time.Time) {
	o.ExpirationDate = &v
}

// GetExpirationValue returns the ExpirationValue field value if set, zero value otherwise.
func (o *EventChildMarket) GetExpirationValue() string {
	if o == nil || o.ExpirationValue == nil {
		var ret string
		return ret
	}
	return *o.ExpirationValue
}

// GetExpirationValueOk returns a tuple with the ExpirationValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChildMarket) GetExpirationValueOk() (*string, bool) {
	if o == nil || o.ExpirationValue == nil {
		return nil, false
	}
	return o.ExpirationValue, true
}

// HasExpirationValue returns a boolean if a field has been set.
func (o *EventChildMarket) HasExpirationValue() bool {
	if o != nil && o.ExpirationValue != nil {
		return true
	}

	return false
}

// SetExpirationValue gets a reference to the given string and assigns it to the ExpirationValue field.
func (o *EventChildMarket) SetExpirationValue(v string) {
	o.ExpirationValue = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EventChildMarket) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChildMarket) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EventChildMarket) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EventChildMarket) SetId(v string) {
	o.Id = &v
}

// GetLastPrice returns the LastPrice field value if set, zero value otherwise.
func (o *EventChildMarket) GetLastPrice() int64 {
	if o == nil || o.LastPrice == nil {
		var ret int64
		return ret
	}
	return *o.LastPrice
}

// GetLastPriceOk returns a tuple with the LastPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChildMarket) GetLastPriceOk() (*int64, bool) {
	if o == nil || o.LastPrice == nil {
		return nil, false
	}
	return o.LastPrice, true
}

// HasLastPrice returns a boolean if a field has been set.
func (o *EventChildMarket) HasLastPrice() bool {
	if o != nil && o.LastPrice != nil {
		return true
	}

	return false
}

// SetLastPrice gets a reference to the given int64 and assigns it to the LastPrice field.
func (o *EventChildMarket) SetLastPrice(v int64) {
	o.LastPrice = &v
}

// GetLiquidity returns the Liquidity field value if set, zero value otherwise.
func (o *EventChildMarket) GetLiquidity() int64 {
	if o == nil || o.Liquidity == nil {
		var ret int64
		return ret
	}
	return *o.Liquidity
}

// GetLiquidityOk returns a tuple with the Liquidity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChildMarket) GetLiquidityOk() (*int64, bool) {
	if o == nil || o.Liquidity == nil {
		return nil, false
	}
	return o.Liquidity, true
}

// HasLiquidity returns a boolean if a field has been set.
func (o *EventChildMarket) HasLiquidity() bool {
	if o != nil && o.Liquidity != nil {
		return true
	}

	return false
}

// SetLiquidity gets a reference to the given int64 and assigns it to the Liquidity field.
func (o *EventChildMarket) SetLiquidity(v int64) {
	o.Liquidity = &v
}

// GetListDate returns the ListDate field value if set, zero value otherwise.
func (o *EventChildMarket) GetListDate() time.Time {
	if o == nil || o.ListDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ListDate
}

// GetListDateOk returns a tuple with the ListDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChildMarket) GetListDateOk() (*time.Time, bool) {
	if o == nil || o.ListDate == nil {
		return nil, false
	}
	return o.ListDate, true
}

// HasListDate returns a boolean if a field has been set.
func (o *EventChildMarket) HasListDate() bool {
	if o != nil && o.ListDate != nil {
		return true
	}

	return false
}

// SetListDate gets a reference to the given time.Time and assigns it to the ListDate field.
func (o *EventChildMarket) SetListDate(v time.Time) {
	o.ListDate = &v
}

// GetMiniTitle returns the MiniTitle field value if set, zero value otherwise.
func (o *EventChildMarket) GetMiniTitle() string {
	if o == nil || o.MiniTitle == nil {
		var ret string
		return ret
	}
	return *o.MiniTitle
}

// GetMiniTitleOk returns a tuple with the MiniTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChildMarket) GetMiniTitleOk() (*string, bool) {
	if o == nil || o.MiniTitle == nil {
		return nil, false
	}
	return o.MiniTitle, true
}

// HasMiniTitle returns a boolean if a field has been set.
func (o *EventChildMarket) HasMiniTitle() bool {
	if o != nil && o.MiniTitle != nil {
		return true
	}

	return false
}

// SetMiniTitle gets a reference to the given string and assigns it to the MiniTitle field.
func (o *EventChildMarket) SetMiniTitle(v string) {
	o.MiniTitle = &v
}

// GetOpenDate returns the OpenDate field value if set, zero value otherwise.
func (o *EventChildMarket) GetOpenDate() time.Time {
	if o == nil || o.OpenDate == nil {
		var ret time.Time
		return ret
	}
	return *o.OpenDate
}

// GetOpenDateOk returns a tuple with the OpenDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChildMarket) GetOpenDateOk() (*time.Time, bool) {
	if o == nil || o.OpenDate == nil {
		return nil, false
	}
	return o.OpenDate, true
}

// HasOpenDate returns a boolean if a field has been set.
func (o *EventChildMarket) HasOpenDate() bool {
	if o != nil && o.OpenDate != nil {
		return true
	}

	return false
}

// SetOpenDate gets a reference to the given time.Time and assigns it to the OpenDate field.
func (o *EventChildMarket) SetOpenDate(v time.Time) {
	o.OpenDate = &v
}

// GetOpenInterest returns the OpenInterest field value if set, zero value otherwise.
func (o *EventChildMarket) GetOpenInterest() int64 {
	if o == nil || o.OpenInterest == nil {
		var ret int64
		return ret
	}
	return *o.OpenInterest
}

// GetOpenInterestOk returns a tuple with the OpenInterest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChildMarket) GetOpenInterestOk() (*int64, bool) {
	if o == nil || o.OpenInterest == nil {
		return nil, false
	}
	return o.OpenInterest, true
}

// HasOpenInterest returns a boolean if a field has been set.
func (o *EventChildMarket) HasOpenInterest() bool {
	if o != nil && o.OpenInterest != nil {
		return true
	}

	return false
}

// SetOpenInterest gets a reference to the given int64 and assigns it to the OpenInterest field.
func (o *EventChildMarket) SetOpenInterest(v int64) {
	o.OpenInterest = &v
}

// GetPreviousPrice returns the PreviousPrice field value if set, zero value otherwise.
func (o *EventChildMarket) GetPreviousPrice() int64 {
	if o == nil || o.PreviousPrice == nil {
		var ret int64
		return ret
	}
	return *o.PreviousPrice
}

// GetPreviousPriceOk returns a tuple with the PreviousPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChildMarket) GetPreviousPriceOk() (*int64, bool) {
	if o == nil || o.PreviousPrice == nil {
		return nil, false
	}
	return o.PreviousPrice, true
}

// HasPreviousPrice returns a boolean if a field has been set.
func (o *EventChildMarket) HasPreviousPrice() bool {
	if o != nil && o.PreviousPrice != nil {
		return true
	}

	return false
}

// SetPreviousPrice gets a reference to the given int64 and assigns it to the PreviousPrice field.
func (o *EventChildMarket) SetPreviousPrice(v int64) {
	o.PreviousPrice = &v
}

// GetPreviousYesAsk returns the PreviousYesAsk field value if set, zero value otherwise.
func (o *EventChildMarket) GetPreviousYesAsk() int64 {
	if o == nil || o.PreviousYesAsk == nil {
		var ret int64
		return ret
	}
	return *o.PreviousYesAsk
}

// GetPreviousYesAskOk returns a tuple with the PreviousYesAsk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChildMarket) GetPreviousYesAskOk() (*int64, bool) {
	if o == nil || o.PreviousYesAsk == nil {
		return nil, false
	}
	return o.PreviousYesAsk, true
}

// HasPreviousYesAsk returns a boolean if a field has been set.
func (o *EventChildMarket) HasPreviousYesAsk() bool {
	if o != nil && o.PreviousYesAsk != nil {
		return true
	}

	return false
}

// SetPreviousYesAsk gets a reference to the given int64 and assigns it to the PreviousYesAsk field.
func (o *EventChildMarket) SetPreviousYesAsk(v int64) {
	o.PreviousYesAsk = &v
}

// GetPreviousYesBid returns the PreviousYesBid field value if set, zero value otherwise.
func (o *EventChildMarket) GetPreviousYesBid() int64 {
	if o == nil || o.PreviousYesBid == nil {
		var ret int64
		return ret
	}
	return *o.PreviousYesBid
}

// GetPreviousYesBidOk returns a tuple with the PreviousYesBid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChildMarket) GetPreviousYesBidOk() (*int64, bool) {
	if o == nil || o.PreviousYesBid == nil {
		return nil, false
	}
	return o.PreviousYesBid, true
}

// HasPreviousYesBid returns a boolean if a field has been set.
func (o *EventChildMarket) HasPreviousYesBid() bool {
	if o != nil && o.PreviousYesBid != nil {
		return true
	}

	return false
}

// SetPreviousYesBid gets a reference to the given int64 and assigns it to the PreviousYesBid field.
func (o *EventChildMarket) SetPreviousYesBid(v int64) {
	o.PreviousYesBid = &v
}

// GetRecentVolume returns the RecentVolume field value if set, zero value otherwise.
func (o *EventChildMarket) GetRecentVolume() int64 {
	if o == nil || o.RecentVolume == nil {
		var ret int64
		return ret
	}
	return *o.RecentVolume
}

// GetRecentVolumeOk returns a tuple with the RecentVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChildMarket) GetRecentVolumeOk() (*int64, bool) {
	if o == nil || o.RecentVolume == nil {
		return nil, false
	}
	return o.RecentVolume, true
}

// HasRecentVolume returns a boolean if a field has been set.
func (o *EventChildMarket) HasRecentVolume() bool {
	if o != nil && o.RecentVolume != nil {
		return true
	}

	return false
}

// SetRecentVolume gets a reference to the given int64 and assigns it to the RecentVolume field.
func (o *EventChildMarket) SetRecentVolume(v int64) {
	o.RecentVolume = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *EventChildMarket) GetResult() string {
	if o == nil || o.Result == nil {
		var ret string
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChildMarket) GetResultOk() (*string, bool) {
	if o == nil || o.Result == nil {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *EventChildMarket) HasResult() bool {
	if o != nil && o.Result != nil {
		return true
	}

	return false
}

// SetResult gets a reference to the given string and assigns it to the Result field.
func (o *EventChildMarket) SetResult(v string) {
	o.Result = &v
}

// GetRulebookVariables returns the RulebookVariables field value if set, zero value otherwise.
func (o *EventChildMarket) GetRulebookVariables() map[string]string {
	if o == nil || o.RulebookVariables == nil {
		var ret map[string]string
		return ret
	}
	return *o.RulebookVariables
}

// GetRulebookVariablesOk returns a tuple with the RulebookVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChildMarket) GetRulebookVariablesOk() (*map[string]string, bool) {
	if o == nil || o.RulebookVariables == nil {
		return nil, false
	}
	return o.RulebookVariables, true
}

// HasRulebookVariables returns a boolean if a field has been set.
func (o *EventChildMarket) HasRulebookVariables() bool {
	if o != nil && o.RulebookVariables != nil {
		return true
	}

	return false
}

// SetRulebookVariables gets a reference to the given map[string]string and assigns it to the RulebookVariables field.
func (o *EventChildMarket) SetRulebookVariables(v map[string]string) {
	o.RulebookVariables = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *EventChildMarket) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChildMarket) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *EventChildMarket) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *EventChildMarket) SetStatus(v string) {
	o.Status = &v
}

// GetSubTitle returns the SubTitle field value if set, zero value otherwise.
func (o *EventChildMarket) GetSubTitle() string {
	if o == nil || o.SubTitle == nil {
		var ret string
		return ret
	}
	return *o.SubTitle
}

// GetSubTitleOk returns a tuple with the SubTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChildMarket) GetSubTitleOk() (*string, bool) {
	if o == nil || o.SubTitle == nil {
		return nil, false
	}
	return o.SubTitle, true
}

// HasSubTitle returns a boolean if a field has been set.
func (o *EventChildMarket) HasSubTitle() bool {
	if o != nil && o.SubTitle != nil {
		return true
	}

	return false
}

// SetSubTitle gets a reference to the given string and assigns it to the SubTitle field.
func (o *EventChildMarket) SetSubTitle(v string) {
	o.SubTitle = &v
}

// GetTickerName returns the TickerName field value if set, zero value otherwise.
func (o *EventChildMarket) GetTickerName() string {
	if o == nil || o.TickerName == nil {
		var ret string
		return ret
	}
	return *o.TickerName
}

// GetTickerNameOk returns a tuple with the TickerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChildMarket) GetTickerNameOk() (*string, bool) {
	if o == nil || o.TickerName == nil {
		return nil, false
	}
	return o.TickerName, true
}

// HasTickerName returns a boolean if a field has been set.
func (o *EventChildMarket) HasTickerName() bool {
	if o != nil && o.TickerName != nil {
		return true
	}

	return false
}

// SetTickerName gets a reference to the given string and assigns it to the TickerName field.
func (o *EventChildMarket) SetTickerName(v string) {
	o.TickerName = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *EventChildMarket) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChildMarket) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *EventChildMarket) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *EventChildMarket) SetTitle(v string) {
	o.Title = &v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *EventChildMarket) GetVolume() int64 {
	if o == nil || o.Volume == nil {
		var ret int64
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChildMarket) GetVolumeOk() (*int64, bool) {
	if o == nil || o.Volume == nil {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *EventChildMarket) HasVolume() bool {
	if o != nil && o.Volume != nil {
		return true
	}

	return false
}

// SetVolume gets a reference to the given int64 and assigns it to the Volume field.
func (o *EventChildMarket) SetVolume(v int64) {
	o.Volume = &v
}

// GetYesAsk returns the YesAsk field value if set, zero value otherwise.
func (o *EventChildMarket) GetYesAsk() int64 {
	if o == nil || o.YesAsk == nil {
		var ret int64
		return ret
	}
	return *o.YesAsk
}

// GetYesAskOk returns a tuple with the YesAsk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChildMarket) GetYesAskOk() (*int64, bool) {
	if o == nil || o.YesAsk == nil {
		return nil, false
	}
	return o.YesAsk, true
}

// HasYesAsk returns a boolean if a field has been set.
func (o *EventChildMarket) HasYesAsk() bool {
	if o != nil && o.YesAsk != nil {
		return true
	}

	return false
}

// SetYesAsk gets a reference to the given int64 and assigns it to the YesAsk field.
func (o *EventChildMarket) SetYesAsk(v int64) {
	o.YesAsk = &v
}

// GetYesBid returns the YesBid field value if set, zero value otherwise.
func (o *EventChildMarket) GetYesBid() int64 {
	if o == nil || o.YesBid == nil {
		var ret int64
		return ret
	}
	return *o.YesBid
}

// GetYesBidOk returns a tuple with the YesBid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChildMarket) GetYesBidOk() (*int64, bool) {
	if o == nil || o.YesBid == nil {
		return nil, false
	}
	return o.YesBid, true
}

// HasYesBid returns a boolean if a field has been set.
func (o *EventChildMarket) HasYesBid() bool {
	if o != nil && o.YesBid != nil {
		return true
	}

	return false
}

// SetYesBid gets a reference to the given int64 and assigns it to the YesBid field.
func (o *EventChildMarket) SetYesBid(v int64) {
	o.YesBid = &v
}

func (o EventChildMarket) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CanCloseEarly != nil {
		toSerialize["can_close_early"] = o.CanCloseEarly
	}
	if o.CloseDate != nil {
		toSerialize["close_date"] = o.CloseDate
	}
	if o.CloseUnconfirmed != nil {
		toSerialize["close_unconfirmed"] = o.CloseUnconfirmed
	}
	if o.CreateDate != nil {
		toSerialize["create_date"] = o.CreateDate
	}
	if o.DollarOpenInterest != nil {
		toSerialize["dollar_open_interest"] = o.DollarOpenInterest
	}
	if o.DollarRecentVolume != nil {
		toSerialize["dollar_recent_volume"] = o.DollarRecentVolume
	}
	if o.DollarVolume != nil {
		toSerialize["dollar_volume"] = o.DollarVolume
	}
	if o.ExpirationDate != nil {
		toSerialize["expiration_date"] = o.ExpirationDate
	}
	if o.ExpirationValue != nil {
		toSerialize["expiration_value"] = o.ExpirationValue
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.LastPrice != nil {
		toSerialize["last_price"] = o.LastPrice
	}
	if o.Liquidity != nil {
		toSerialize["liquidity"] = o.Liquidity
	}
	if o.ListDate != nil {
		toSerialize["list_date"] = o.ListDate
	}
	if o.MiniTitle != nil {
		toSerialize["mini_title"] = o.MiniTitle
	}
	if o.OpenDate != nil {
		toSerialize["open_date"] = o.OpenDate
	}
	if o.OpenInterest != nil {
		toSerialize["open_interest"] = o.OpenInterest
	}
	if o.PreviousPrice != nil {
		toSerialize["previous_price"] = o.PreviousPrice
	}
	if o.PreviousYesAsk != nil {
		toSerialize["previous_yes_ask"] = o.PreviousYesAsk
	}
	if o.PreviousYesBid != nil {
		toSerialize["previous_yes_bid"] = o.PreviousYesBid
	}
	if o.RecentVolume != nil {
		toSerialize["recent_volume"] = o.RecentVolume
	}
	if o.Result != nil {
		toSerialize["result"] = o.Result
	}
	if o.RulebookVariables != nil {
		toSerialize["rulebook_variables"] = o.RulebookVariables
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.SubTitle != nil {
		toSerialize["sub_title"] = o.SubTitle
	}
	if o.TickerName != nil {
		toSerialize["ticker_name"] = o.TickerName
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Volume != nil {
		toSerialize["volume"] = o.Volume
	}
	if o.YesAsk != nil {
		toSerialize["yes_ask"] = o.YesAsk
	}
	if o.YesBid != nil {
		toSerialize["yes_bid"] = o.YesBid
	}
	return json.Marshal(toSerialize)
}

type NullableEventChildMarket struct {
	value *EventChildMarket
	isSet bool
}

func (v NullableEventChildMarket) Get() *EventChildMarket {
	return v.value
}

func (v *NullableEventChildMarket) Set(val *EventChildMarket) {
	v.value = val
	v.isSet = true
}

func (v NullableEventChildMarket) IsSet() bool {
	return v.isSet
}

func (v *NullableEventChildMarket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventChildMarket(val *EventChildMarket) *NullableEventChildMarket {
	return &NullableEventChildMarket{value: val, isSet: true}
}

func (v NullableEventChildMarket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventChildMarket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



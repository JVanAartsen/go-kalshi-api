/*
Kalshi API.

This documentation describes Kalshi's REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kalshiAPI

import (
	"encoding/json"
	"time"
)

// Order Represents user orders in the api.  When an order is matched multiple trades can be created this can be tracked by looking into the trade.order_id field.
type Order struct {
	CloseCancelCount *int32 `json:"close_cancel_count,omitempty"`
	CreateTs *time.Time `json:"create_ts,omitempty"`
	DecreaseCount *int32 `json:"decrease_count,omitempty"`
	ExpirationTs *time.Time `json:"expiration_ts,omitempty"`
	ExtraCost *int64 `json:"extra_cost,omitempty"`
	ExtraCount *int32 `json:"extra_count,omitempty"`
	FccCancelCount *int32 `json:"fcc_cancel_count,omitempty"`
	IsYes *bool `json:"is_yes,omitempty"`
	LastUpdateOp *string `json:"last_update_op,omitempty"`
	MakerFillCount *int32 `json:"maker_fill_count,omitempty"`
	MarketId *string `json:"market_id,omitempty"`
	OrderId *string `json:"order_id,omitempty"`
	PlaceCount *int32 `json:"place_count,omitempty"`
	Price *int64 `json:"price,omitempty"`
	QueuePosition *int32 `json:"queue_position,omitempty"`
	RemainingCount *int32 `json:"remaining_count,omitempty"`
	Status *string `json:"status,omitempty"`
	TakerFees *int64 `json:"taker_fees,omitempty"`
	TakerFillCost *int64 `json:"taker_fill_cost,omitempty"`
	TakerFillCount *int32 `json:"taker_fill_count,omitempty"`
	UserId *string `json:"user_id,omitempty"`
}

// NewOrder instantiates a new Order object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrder() *Order {
	this := Order{}
	return &this
}

// NewOrderWithDefaults instantiates a new Order object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderWithDefaults() *Order {
	this := Order{}
	return &this
}

// GetCloseCancelCount returns the CloseCancelCount field value if set, zero value otherwise.
func (o *Order) GetCloseCancelCount() int32 {
	if o == nil || o.CloseCancelCount == nil {
		var ret int32
		return ret
	}
	return *o.CloseCancelCount
}

// GetCloseCancelCountOk returns a tuple with the CloseCancelCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetCloseCancelCountOk() (*int32, bool) {
	if o == nil || o.CloseCancelCount == nil {
		return nil, false
	}
	return o.CloseCancelCount, true
}

// HasCloseCancelCount returns a boolean if a field has been set.
func (o *Order) HasCloseCancelCount() bool {
	if o != nil && o.CloseCancelCount != nil {
		return true
	}

	return false
}

// SetCloseCancelCount gets a reference to the given int32 and assigns it to the CloseCancelCount field.
func (o *Order) SetCloseCancelCount(v int32) {
	o.CloseCancelCount = &v
}

// GetCreateTs returns the CreateTs field value if set, zero value otherwise.
func (o *Order) GetCreateTs() time.Time {
	if o == nil || o.CreateTs == nil {
		var ret time.Time
		return ret
	}
	return *o.CreateTs
}

// GetCreateTsOk returns a tuple with the CreateTs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetCreateTsOk() (*time.Time, bool) {
	if o == nil || o.CreateTs == nil {
		return nil, false
	}
	return o.CreateTs, true
}

// HasCreateTs returns a boolean if a field has been set.
func (o *Order) HasCreateTs() bool {
	if o != nil && o.CreateTs != nil {
		return true
	}

	return false
}

// SetCreateTs gets a reference to the given time.Time and assigns it to the CreateTs field.
func (o *Order) SetCreateTs(v time.Time) {
	o.CreateTs = &v
}

// GetDecreaseCount returns the DecreaseCount field value if set, zero value otherwise.
func (o *Order) GetDecreaseCount() int32 {
	if o == nil || o.DecreaseCount == nil {
		var ret int32
		return ret
	}
	return *o.DecreaseCount
}

// GetDecreaseCountOk returns a tuple with the DecreaseCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetDecreaseCountOk() (*int32, bool) {
	if o == nil || o.DecreaseCount == nil {
		return nil, false
	}
	return o.DecreaseCount, true
}

// HasDecreaseCount returns a boolean if a field has been set.
func (o *Order) HasDecreaseCount() bool {
	if o != nil && o.DecreaseCount != nil {
		return true
	}

	return false
}

// SetDecreaseCount gets a reference to the given int32 and assigns it to the DecreaseCount field.
func (o *Order) SetDecreaseCount(v int32) {
	o.DecreaseCount = &v
}

// GetExpirationTs returns the ExpirationTs field value if set, zero value otherwise.
func (o *Order) GetExpirationTs() time.Time {
	if o == nil || o.ExpirationTs == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpirationTs
}

// GetExpirationTsOk returns a tuple with the ExpirationTs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetExpirationTsOk() (*time.Time, bool) {
	if o == nil || o.ExpirationTs == nil {
		return nil, false
	}
	return o.ExpirationTs, true
}

// HasExpirationTs returns a boolean if a field has been set.
func (o *Order) HasExpirationTs() bool {
	if o != nil && o.ExpirationTs != nil {
		return true
	}

	return false
}

// SetExpirationTs gets a reference to the given time.Time and assigns it to the ExpirationTs field.
func (o *Order) SetExpirationTs(v time.Time) {
	o.ExpirationTs = &v
}

// GetExtraCost returns the ExtraCost field value if set, zero value otherwise.
func (o *Order) GetExtraCost() int64 {
	if o == nil || o.ExtraCost == nil {
		var ret int64
		return ret
	}
	return *o.ExtraCost
}

// GetExtraCostOk returns a tuple with the ExtraCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetExtraCostOk() (*int64, bool) {
	if o == nil || o.ExtraCost == nil {
		return nil, false
	}
	return o.ExtraCost, true
}

// HasExtraCost returns a boolean if a field has been set.
func (o *Order) HasExtraCost() bool {
	if o != nil && o.ExtraCost != nil {
		return true
	}

	return false
}

// SetExtraCost gets a reference to the given int64 and assigns it to the ExtraCost field.
func (o *Order) SetExtraCost(v int64) {
	o.ExtraCost = &v
}

// GetExtraCount returns the ExtraCount field value if set, zero value otherwise.
func (o *Order) GetExtraCount() int32 {
	if o == nil || o.ExtraCount == nil {
		var ret int32
		return ret
	}
	return *o.ExtraCount
}

// GetExtraCountOk returns a tuple with the ExtraCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetExtraCountOk() (*int32, bool) {
	if o == nil || o.ExtraCount == nil {
		return nil, false
	}
	return o.ExtraCount, true
}

// HasExtraCount returns a boolean if a field has been set.
func (o *Order) HasExtraCount() bool {
	if o != nil && o.ExtraCount != nil {
		return true
	}

	return false
}

// SetExtraCount gets a reference to the given int32 and assigns it to the ExtraCount field.
func (o *Order) SetExtraCount(v int32) {
	o.ExtraCount = &v
}

// GetFccCancelCount returns the FccCancelCount field value if set, zero value otherwise.
func (o *Order) GetFccCancelCount() int32 {
	if o == nil || o.FccCancelCount == nil {
		var ret int32
		return ret
	}
	return *o.FccCancelCount
}

// GetFccCancelCountOk returns a tuple with the FccCancelCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetFccCancelCountOk() (*int32, bool) {
	if o == nil || o.FccCancelCount == nil {
		return nil, false
	}
	return o.FccCancelCount, true
}

// HasFccCancelCount returns a boolean if a field has been set.
func (o *Order) HasFccCancelCount() bool {
	if o != nil && o.FccCancelCount != nil {
		return true
	}

	return false
}

// SetFccCancelCount gets a reference to the given int32 and assigns it to the FccCancelCount field.
func (o *Order) SetFccCancelCount(v int32) {
	o.FccCancelCount = &v
}

// GetIsYes returns the IsYes field value if set, zero value otherwise.
func (o *Order) GetIsYes() bool {
	if o == nil || o.IsYes == nil {
		var ret bool
		return ret
	}
	return *o.IsYes
}

// GetIsYesOk returns a tuple with the IsYes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetIsYesOk() (*bool, bool) {
	if o == nil || o.IsYes == nil {
		return nil, false
	}
	return o.IsYes, true
}

// HasIsYes returns a boolean if a field has been set.
func (o *Order) HasIsYes() bool {
	if o != nil && o.IsYes != nil {
		return true
	}

	return false
}

// SetIsYes gets a reference to the given bool and assigns it to the IsYes field.
func (o *Order) SetIsYes(v bool) {
	o.IsYes = &v
}

// GetLastUpdateOp returns the LastUpdateOp field value if set, zero value otherwise.
func (o *Order) GetLastUpdateOp() string {
	if o == nil || o.LastUpdateOp == nil {
		var ret string
		return ret
	}
	return *o.LastUpdateOp
}

// GetLastUpdateOpOk returns a tuple with the LastUpdateOp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetLastUpdateOpOk() (*string, bool) {
	if o == nil || o.LastUpdateOp == nil {
		return nil, false
	}
	return o.LastUpdateOp, true
}

// HasLastUpdateOp returns a boolean if a field has been set.
func (o *Order) HasLastUpdateOp() bool {
	if o != nil && o.LastUpdateOp != nil {
		return true
	}

	return false
}

// SetLastUpdateOp gets a reference to the given string and assigns it to the LastUpdateOp field.
func (o *Order) SetLastUpdateOp(v string) {
	o.LastUpdateOp = &v
}

// GetMakerFillCount returns the MakerFillCount field value if set, zero value otherwise.
func (o *Order) GetMakerFillCount() int32 {
	if o == nil || o.MakerFillCount == nil {
		var ret int32
		return ret
	}
	return *o.MakerFillCount
}

// GetMakerFillCountOk returns a tuple with the MakerFillCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetMakerFillCountOk() (*int32, bool) {
	if o == nil || o.MakerFillCount == nil {
		return nil, false
	}
	return o.MakerFillCount, true
}

// HasMakerFillCount returns a boolean if a field has been set.
func (o *Order) HasMakerFillCount() bool {
	if o != nil && o.MakerFillCount != nil {
		return true
	}

	return false
}

// SetMakerFillCount gets a reference to the given int32 and assigns it to the MakerFillCount field.
func (o *Order) SetMakerFillCount(v int32) {
	o.MakerFillCount = &v
}

// GetMarketId returns the MarketId field value if set, zero value otherwise.
func (o *Order) GetMarketId() string {
	if o == nil || o.MarketId == nil {
		var ret string
		return ret
	}
	return *o.MarketId
}

// GetMarketIdOk returns a tuple with the MarketId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetMarketIdOk() (*string, bool) {
	if o == nil || o.MarketId == nil {
		return nil, false
	}
	return o.MarketId, true
}

// HasMarketId returns a boolean if a field has been set.
func (o *Order) HasMarketId() bool {
	if o != nil && o.MarketId != nil {
		return true
	}

	return false
}

// SetMarketId gets a reference to the given string and assigns it to the MarketId field.
func (o *Order) SetMarketId(v string) {
	o.MarketId = &v
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *Order) GetOrderId() string {
	if o == nil || o.OrderId == nil {
		var ret string
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetOrderIdOk() (*string, bool) {
	if o == nil || o.OrderId == nil {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *Order) HasOrderId() bool {
	if o != nil && o.OrderId != nil {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given string and assigns it to the OrderId field.
func (o *Order) SetOrderId(v string) {
	o.OrderId = &v
}

// GetPlaceCount returns the PlaceCount field value if set, zero value otherwise.
func (o *Order) GetPlaceCount() int32 {
	if o == nil || o.PlaceCount == nil {
		var ret int32
		return ret
	}
	return *o.PlaceCount
}

// GetPlaceCountOk returns a tuple with the PlaceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetPlaceCountOk() (*int32, bool) {
	if o == nil || o.PlaceCount == nil {
		return nil, false
	}
	return o.PlaceCount, true
}

// HasPlaceCount returns a boolean if a field has been set.
func (o *Order) HasPlaceCount() bool {
	if o != nil && o.PlaceCount != nil {
		return true
	}

	return false
}

// SetPlaceCount gets a reference to the given int32 and assigns it to the PlaceCount field.
func (o *Order) SetPlaceCount(v int32) {
	o.PlaceCount = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *Order) GetPrice() int64 {
	if o == nil || o.Price == nil {
		var ret int64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetPriceOk() (*int64, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *Order) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given int64 and assigns it to the Price field.
func (o *Order) SetPrice(v int64) {
	o.Price = &v
}

// GetQueuePosition returns the QueuePosition field value if set, zero value otherwise.
func (o *Order) GetQueuePosition() int32 {
	if o == nil || o.QueuePosition == nil {
		var ret int32
		return ret
	}
	return *o.QueuePosition
}

// GetQueuePositionOk returns a tuple with the QueuePosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetQueuePositionOk() (*int32, bool) {
	if o == nil || o.QueuePosition == nil {
		return nil, false
	}
	return o.QueuePosition, true
}

// HasQueuePosition returns a boolean if a field has been set.
func (o *Order) HasQueuePosition() bool {
	if o != nil && o.QueuePosition != nil {
		return true
	}

	return false
}

// SetQueuePosition gets a reference to the given int32 and assigns it to the QueuePosition field.
func (o *Order) SetQueuePosition(v int32) {
	o.QueuePosition = &v
}

// GetRemainingCount returns the RemainingCount field value if set, zero value otherwise.
func (o *Order) GetRemainingCount() int32 {
	if o == nil || o.RemainingCount == nil {
		var ret int32
		return ret
	}
	return *o.RemainingCount
}

// GetRemainingCountOk returns a tuple with the RemainingCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetRemainingCountOk() (*int32, bool) {
	if o == nil || o.RemainingCount == nil {
		return nil, false
	}
	return o.RemainingCount, true
}

// HasRemainingCount returns a boolean if a field has been set.
func (o *Order) HasRemainingCount() bool {
	if o != nil && o.RemainingCount != nil {
		return true
	}

	return false
}

// SetRemainingCount gets a reference to the given int32 and assigns it to the RemainingCount field.
func (o *Order) SetRemainingCount(v int32) {
	o.RemainingCount = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Order) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Order) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Order) SetStatus(v string) {
	o.Status = &v
}

// GetTakerFees returns the TakerFees field value if set, zero value otherwise.
func (o *Order) GetTakerFees() int64 {
	if o == nil || o.TakerFees == nil {
		var ret int64
		return ret
	}
	return *o.TakerFees
}

// GetTakerFeesOk returns a tuple with the TakerFees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetTakerFeesOk() (*int64, bool) {
	if o == nil || o.TakerFees == nil {
		return nil, false
	}
	return o.TakerFees, true
}

// HasTakerFees returns a boolean if a field has been set.
func (o *Order) HasTakerFees() bool {
	if o != nil && o.TakerFees != nil {
		return true
	}

	return false
}

// SetTakerFees gets a reference to the given int64 and assigns it to the TakerFees field.
func (o *Order) SetTakerFees(v int64) {
	o.TakerFees = &v
}

// GetTakerFillCost returns the TakerFillCost field value if set, zero value otherwise.
func (o *Order) GetTakerFillCost() int64 {
	if o == nil || o.TakerFillCost == nil {
		var ret int64
		return ret
	}
	return *o.TakerFillCost
}

// GetTakerFillCostOk returns a tuple with the TakerFillCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetTakerFillCostOk() (*int64, bool) {
	if o == nil || o.TakerFillCost == nil {
		return nil, false
	}
	return o.TakerFillCost, true
}

// HasTakerFillCost returns a boolean if a field has been set.
func (o *Order) HasTakerFillCost() bool {
	if o != nil && o.TakerFillCost != nil {
		return true
	}

	return false
}

// SetTakerFillCost gets a reference to the given int64 and assigns it to the TakerFillCost field.
func (o *Order) SetTakerFillCost(v int64) {
	o.TakerFillCost = &v
}

// GetTakerFillCount returns the TakerFillCount field value if set, zero value otherwise.
func (o *Order) GetTakerFillCount() int32 {
	if o == nil || o.TakerFillCount == nil {
		var ret int32
		return ret
	}
	return *o.TakerFillCount
}

// GetTakerFillCountOk returns a tuple with the TakerFillCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetTakerFillCountOk() (*int32, bool) {
	if o == nil || o.TakerFillCount == nil {
		return nil, false
	}
	return o.TakerFillCount, true
}

// HasTakerFillCount returns a boolean if a field has been set.
func (o *Order) HasTakerFillCount() bool {
	if o != nil && o.TakerFillCount != nil {
		return true
	}

	return false
}

// SetTakerFillCount gets a reference to the given int32 and assigns it to the TakerFillCount field.
func (o *Order) SetTakerFillCount(v int32) {
	o.TakerFillCount = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *Order) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *Order) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *Order) SetUserId(v string) {
	o.UserId = &v
}

func (o Order) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CloseCancelCount != nil {
		toSerialize["close_cancel_count"] = o.CloseCancelCount
	}
	if o.CreateTs != nil {
		toSerialize["create_ts"] = o.CreateTs
	}
	if o.DecreaseCount != nil {
		toSerialize["decrease_count"] = o.DecreaseCount
	}
	if o.ExpirationTs != nil {
		toSerialize["expiration_ts"] = o.ExpirationTs
	}
	if o.ExtraCost != nil {
		toSerialize["extra_cost"] = o.ExtraCost
	}
	if o.ExtraCount != nil {
		toSerialize["extra_count"] = o.ExtraCount
	}
	if o.FccCancelCount != nil {
		toSerialize["fcc_cancel_count"] = o.FccCancelCount
	}
	if o.IsYes != nil {
		toSerialize["is_yes"] = o.IsYes
	}
	if o.LastUpdateOp != nil {
		toSerialize["last_update_op"] = o.LastUpdateOp
	}
	if o.MakerFillCount != nil {
		toSerialize["maker_fill_count"] = o.MakerFillCount
	}
	if o.MarketId != nil {
		toSerialize["market_id"] = o.MarketId
	}
	if o.OrderId != nil {
		toSerialize["order_id"] = o.OrderId
	}
	if o.PlaceCount != nil {
		toSerialize["place_count"] = o.PlaceCount
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.QueuePosition != nil {
		toSerialize["queue_position"] = o.QueuePosition
	}
	if o.RemainingCount != nil {
		toSerialize["remaining_count"] = o.RemainingCount
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.TakerFees != nil {
		toSerialize["taker_fees"] = o.TakerFees
	}
	if o.TakerFillCost != nil {
		toSerialize["taker_fill_cost"] = o.TakerFillCost
	}
	if o.TakerFillCount != nil {
		toSerialize["taker_fill_count"] = o.TakerFillCount
	}
	if o.UserId != nil {
		toSerialize["user_id"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullableOrder struct {
	value *Order
	isSet bool
}

func (v NullableOrder) Get() *Order {
	return v.value
}

func (v *NullableOrder) Set(val *Order) {
	v.value = val
	v.isSet = true
}

func (v NullableOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrder(val *Order) *NullableOrder {
	return &NullableOrder{value: val, isSet: true}
}

func (v NullableOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



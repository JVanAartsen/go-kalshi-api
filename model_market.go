/*
Kalshi API.

This documentation describes Kalshi's REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kalshiAPI

import (
	"encoding/json"
	"time"
)

// Market Market Contains information about a market. Note: for some fields, you should not assume a fixed structure.
type Market struct {
	CanCloseEarly *bool `json:"can_close_early,omitempty"`
	Category *string `json:"category,omitempty"`
	CloseDate *time.Time `json:"close_date,omitempty"`
	CloseUnconfirmed *bool `json:"close_unconfirmed,omitempty"`
	CreateDate *time.Time `json:"create_date,omitempty"`
	DescriptionCaseNo *string `json:"description_case_no,omitempty"`
	DescriptionCaseYes *string `json:"description_case_yes,omitempty"`
	DescriptionContext *string `json:"description_context,omitempty"`
	DollarOpenInterest *int64 `json:"dollar_open_interest,omitempty"`
	DollarRecentVolume *int64 `json:"dollar_recent_volume,omitempty"`
	DollarVolume *int64 `json:"dollar_volume,omitempty"`
	ExpirationDate *time.Time `json:"expiration_date,omitempty"`
	ExpirationValue *string `json:"expiration_value,omitempty"`
	FrequencyInDays *int32 `json:"frequency_in_days,omitempty"`
	Id *string `json:"id,omitempty"`
	ImageUrl *string `json:"image_url,omitempty"`
	LastPrice *int64 `json:"last_price,omitempty"`
	Liquidity *int64 `json:"liquidity,omitempty"`
	ListDate *time.Time `json:"list_date,omitempty"`
	MetricsTags []string `json:"metrics_tags,omitempty"`
	MinTickSize *string `json:"min_tick_size,omitempty"`
	MiniTitle *string `json:"mini_title,omitempty"`
	OpenDate *time.Time `json:"open_date,omitempty"`
	OpenInterest *int64 `json:"open_interest,omitempty"`
	OptionType *string `json:"option_type,omitempty"`
	OriginalExpirationDate *time.Time `json:"original_expiration_date,omitempty"`
	PreviousPrice *int64 `json:"previous_price,omitempty"`
	PreviousYesAsk *int64 `json:"previous_yes_ask,omitempty"`
	PreviousYesBid *int64 `json:"previous_yes_bid,omitempty"`
	RangedGroupName *string `json:"ranged_group_name,omitempty"`
	RangedGroupTicker *string `json:"ranged_group_ticker,omitempty"`
	RecentVolume *int64 `json:"recent_volume,omitempty"`
	Result *string `json:"result,omitempty"`
	// You should not assume a fixed structure for this field. It is subject to change from market to market.
	RulebookVariables *map[string]string `json:"rulebook_variables,omitempty"`
	SettleDetails *string `json:"settle_details,omitempty"`
	SettlementSources []SettlementSource `json:"settlement_sources,omitempty"`
	Status *string `json:"status,omitempty"`
	StrikePrice *float64 `json:"strike_price,omitempty"`
	SubTitle *string `json:"sub_title,omitempty"`
	Tags []string `json:"tags,omitempty"`
	TickerName *string `json:"ticker_name,omitempty"`
	Title *string `json:"title,omitempty"`
	Underlying *string `json:"underlying,omitempty"`
	Volume *int64 `json:"volume,omitempty"`
	YesAsk *int64 `json:"yes_ask,omitempty"`
	YesBid *int64 `json:"yes_bid,omitempty"`
}

// NewMarket instantiates a new Market object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarket() *Market {
	this := Market{}
	return &this
}

// NewMarketWithDefaults instantiates a new Market object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarketWithDefaults() *Market {
	this := Market{}
	return &this
}

// GetCanCloseEarly returns the CanCloseEarly field value if set, zero value otherwise.
func (o *Market) GetCanCloseEarly() bool {
	if o == nil || o.CanCloseEarly == nil {
		var ret bool
		return ret
	}
	return *o.CanCloseEarly
}

// GetCanCloseEarlyOk returns a tuple with the CanCloseEarly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetCanCloseEarlyOk() (*bool, bool) {
	if o == nil || o.CanCloseEarly == nil {
		return nil, false
	}
	return o.CanCloseEarly, true
}

// HasCanCloseEarly returns a boolean if a field has been set.
func (o *Market) HasCanCloseEarly() bool {
	if o != nil && o.CanCloseEarly != nil {
		return true
	}

	return false
}

// SetCanCloseEarly gets a reference to the given bool and assigns it to the CanCloseEarly field.
func (o *Market) SetCanCloseEarly(v bool) {
	o.CanCloseEarly = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *Market) GetCategory() string {
	if o == nil || o.Category == nil {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetCategoryOk() (*string, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *Market) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *Market) SetCategory(v string) {
	o.Category = &v
}

// GetCloseDate returns the CloseDate field value if set, zero value otherwise.
func (o *Market) GetCloseDate() time.Time {
	if o == nil || o.CloseDate == nil {
		var ret time.Time
		return ret
	}
	return *o.CloseDate
}

// GetCloseDateOk returns a tuple with the CloseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetCloseDateOk() (*time.Time, bool) {
	if o == nil || o.CloseDate == nil {
		return nil, false
	}
	return o.CloseDate, true
}

// HasCloseDate returns a boolean if a field has been set.
func (o *Market) HasCloseDate() bool {
	if o != nil && o.CloseDate != nil {
		return true
	}

	return false
}

// SetCloseDate gets a reference to the given time.Time and assigns it to the CloseDate field.
func (o *Market) SetCloseDate(v time.Time) {
	o.CloseDate = &v
}

// GetCloseUnconfirmed returns the CloseUnconfirmed field value if set, zero value otherwise.
func (o *Market) GetCloseUnconfirmed() bool {
	if o == nil || o.CloseUnconfirmed == nil {
		var ret bool
		return ret
	}
	return *o.CloseUnconfirmed
}

// GetCloseUnconfirmedOk returns a tuple with the CloseUnconfirmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetCloseUnconfirmedOk() (*bool, bool) {
	if o == nil || o.CloseUnconfirmed == nil {
		return nil, false
	}
	return o.CloseUnconfirmed, true
}

// HasCloseUnconfirmed returns a boolean if a field has been set.
func (o *Market) HasCloseUnconfirmed() bool {
	if o != nil && o.CloseUnconfirmed != nil {
		return true
	}

	return false
}

// SetCloseUnconfirmed gets a reference to the given bool and assigns it to the CloseUnconfirmed field.
func (o *Market) SetCloseUnconfirmed(v bool) {
	o.CloseUnconfirmed = &v
}

// GetCreateDate returns the CreateDate field value if set, zero value otherwise.
func (o *Market) GetCreateDate() time.Time {
	if o == nil || o.CreateDate == nil {
		var ret time.Time
		return ret
	}
	return *o.CreateDate
}

// GetCreateDateOk returns a tuple with the CreateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetCreateDateOk() (*time.Time, bool) {
	if o == nil || o.CreateDate == nil {
		return nil, false
	}
	return o.CreateDate, true
}

// HasCreateDate returns a boolean if a field has been set.
func (o *Market) HasCreateDate() bool {
	if o != nil && o.CreateDate != nil {
		return true
	}

	return false
}

// SetCreateDate gets a reference to the given time.Time and assigns it to the CreateDate field.
func (o *Market) SetCreateDate(v time.Time) {
	o.CreateDate = &v
}

// GetDescriptionCaseNo returns the DescriptionCaseNo field value if set, zero value otherwise.
func (o *Market) GetDescriptionCaseNo() string {
	if o == nil || o.DescriptionCaseNo == nil {
		var ret string
		return ret
	}
	return *o.DescriptionCaseNo
}

// GetDescriptionCaseNoOk returns a tuple with the DescriptionCaseNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetDescriptionCaseNoOk() (*string, bool) {
	if o == nil || o.DescriptionCaseNo == nil {
		return nil, false
	}
	return o.DescriptionCaseNo, true
}

// HasDescriptionCaseNo returns a boolean if a field has been set.
func (o *Market) HasDescriptionCaseNo() bool {
	if o != nil && o.DescriptionCaseNo != nil {
		return true
	}

	return false
}

// SetDescriptionCaseNo gets a reference to the given string and assigns it to the DescriptionCaseNo field.
func (o *Market) SetDescriptionCaseNo(v string) {
	o.DescriptionCaseNo = &v
}

// GetDescriptionCaseYes returns the DescriptionCaseYes field value if set, zero value otherwise.
func (o *Market) GetDescriptionCaseYes() string {
	if o == nil || o.DescriptionCaseYes == nil {
		var ret string
		return ret
	}
	return *o.DescriptionCaseYes
}

// GetDescriptionCaseYesOk returns a tuple with the DescriptionCaseYes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetDescriptionCaseYesOk() (*string, bool) {
	if o == nil || o.DescriptionCaseYes == nil {
		return nil, false
	}
	return o.DescriptionCaseYes, true
}

// HasDescriptionCaseYes returns a boolean if a field has been set.
func (o *Market) HasDescriptionCaseYes() bool {
	if o != nil && o.DescriptionCaseYes != nil {
		return true
	}

	return false
}

// SetDescriptionCaseYes gets a reference to the given string and assigns it to the DescriptionCaseYes field.
func (o *Market) SetDescriptionCaseYes(v string) {
	o.DescriptionCaseYes = &v
}

// GetDescriptionContext returns the DescriptionContext field value if set, zero value otherwise.
func (o *Market) GetDescriptionContext() string {
	if o == nil || o.DescriptionContext == nil {
		var ret string
		return ret
	}
	return *o.DescriptionContext
}

// GetDescriptionContextOk returns a tuple with the DescriptionContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetDescriptionContextOk() (*string, bool) {
	if o == nil || o.DescriptionContext == nil {
		return nil, false
	}
	return o.DescriptionContext, true
}

// HasDescriptionContext returns a boolean if a field has been set.
func (o *Market) HasDescriptionContext() bool {
	if o != nil && o.DescriptionContext != nil {
		return true
	}

	return false
}

// SetDescriptionContext gets a reference to the given string and assigns it to the DescriptionContext field.
func (o *Market) SetDescriptionContext(v string) {
	o.DescriptionContext = &v
}

// GetDollarOpenInterest returns the DollarOpenInterest field value if set, zero value otherwise.
func (o *Market) GetDollarOpenInterest() int64 {
	if o == nil || o.DollarOpenInterest == nil {
		var ret int64
		return ret
	}
	return *o.DollarOpenInterest
}

// GetDollarOpenInterestOk returns a tuple with the DollarOpenInterest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetDollarOpenInterestOk() (*int64, bool) {
	if o == nil || o.DollarOpenInterest == nil {
		return nil, false
	}
	return o.DollarOpenInterest, true
}

// HasDollarOpenInterest returns a boolean if a field has been set.
func (o *Market) HasDollarOpenInterest() bool {
	if o != nil && o.DollarOpenInterest != nil {
		return true
	}

	return false
}

// SetDollarOpenInterest gets a reference to the given int64 and assigns it to the DollarOpenInterest field.
func (o *Market) SetDollarOpenInterest(v int64) {
	o.DollarOpenInterest = &v
}

// GetDollarRecentVolume returns the DollarRecentVolume field value if set, zero value otherwise.
func (o *Market) GetDollarRecentVolume() int64 {
	if o == nil || o.DollarRecentVolume == nil {
		var ret int64
		return ret
	}
	return *o.DollarRecentVolume
}

// GetDollarRecentVolumeOk returns a tuple with the DollarRecentVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetDollarRecentVolumeOk() (*int64, bool) {
	if o == nil || o.DollarRecentVolume == nil {
		return nil, false
	}
	return o.DollarRecentVolume, true
}

// HasDollarRecentVolume returns a boolean if a field has been set.
func (o *Market) HasDollarRecentVolume() bool {
	if o != nil && o.DollarRecentVolume != nil {
		return true
	}

	return false
}

// SetDollarRecentVolume gets a reference to the given int64 and assigns it to the DollarRecentVolume field.
func (o *Market) SetDollarRecentVolume(v int64) {
	o.DollarRecentVolume = &v
}

// GetDollarVolume returns the DollarVolume field value if set, zero value otherwise.
func (o *Market) GetDollarVolume() int64 {
	if o == nil || o.DollarVolume == nil {
		var ret int64
		return ret
	}
	return *o.DollarVolume
}

// GetDollarVolumeOk returns a tuple with the DollarVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetDollarVolumeOk() (*int64, bool) {
	if o == nil || o.DollarVolume == nil {
		return nil, false
	}
	return o.DollarVolume, true
}

// HasDollarVolume returns a boolean if a field has been set.
func (o *Market) HasDollarVolume() bool {
	if o != nil && o.DollarVolume != nil {
		return true
	}

	return false
}

// SetDollarVolume gets a reference to the given int64 and assigns it to the DollarVolume field.
func (o *Market) SetDollarVolume(v int64) {
	o.DollarVolume = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *Market) GetExpirationDate() time.Time {
	if o == nil || o.ExpirationDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil || o.ExpirationDate == nil {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *Market) HasExpirationDate() bool {
	if o != nil && o.ExpirationDate != nil {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given time.Time and assigns it to the ExpirationDate field.
func (o *Market) SetExpirationDate(v time.Time) {
	o.ExpirationDate = &v
}

// GetExpirationValue returns the ExpirationValue field value if set, zero value otherwise.
func (o *Market) GetExpirationValue() string {
	if o == nil || o.ExpirationValue == nil {
		var ret string
		return ret
	}
	return *o.ExpirationValue
}

// GetExpirationValueOk returns a tuple with the ExpirationValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetExpirationValueOk() (*string, bool) {
	if o == nil || o.ExpirationValue == nil {
		return nil, false
	}
	return o.ExpirationValue, true
}

// HasExpirationValue returns a boolean if a field has been set.
func (o *Market) HasExpirationValue() bool {
	if o != nil && o.ExpirationValue != nil {
		return true
	}

	return false
}

// SetExpirationValue gets a reference to the given string and assigns it to the ExpirationValue field.
func (o *Market) SetExpirationValue(v string) {
	o.ExpirationValue = &v
}

// GetFrequencyInDays returns the FrequencyInDays field value if set, zero value otherwise.
func (o *Market) GetFrequencyInDays() int32 {
	if o == nil || o.FrequencyInDays == nil {
		var ret int32
		return ret
	}
	return *o.FrequencyInDays
}

// GetFrequencyInDaysOk returns a tuple with the FrequencyInDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetFrequencyInDaysOk() (*int32, bool) {
	if o == nil || o.FrequencyInDays == nil {
		return nil, false
	}
	return o.FrequencyInDays, true
}

// HasFrequencyInDays returns a boolean if a field has been set.
func (o *Market) HasFrequencyInDays() bool {
	if o != nil && o.FrequencyInDays != nil {
		return true
	}

	return false
}

// SetFrequencyInDays gets a reference to the given int32 and assigns it to the FrequencyInDays field.
func (o *Market) SetFrequencyInDays(v int32) {
	o.FrequencyInDays = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Market) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Market) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Market) SetId(v string) {
	o.Id = &v
}

// GetImageUrl returns the ImageUrl field value if set, zero value otherwise.
func (o *Market) GetImageUrl() string {
	if o == nil || o.ImageUrl == nil {
		var ret string
		return ret
	}
	return *o.ImageUrl
}

// GetImageUrlOk returns a tuple with the ImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetImageUrlOk() (*string, bool) {
	if o == nil || o.ImageUrl == nil {
		return nil, false
	}
	return o.ImageUrl, true
}

// HasImageUrl returns a boolean if a field has been set.
func (o *Market) HasImageUrl() bool {
	if o != nil && o.ImageUrl != nil {
		return true
	}

	return false
}

// SetImageUrl gets a reference to the given string and assigns it to the ImageUrl field.
func (o *Market) SetImageUrl(v string) {
	o.ImageUrl = &v
}

// GetLastPrice returns the LastPrice field value if set, zero value otherwise.
func (o *Market) GetLastPrice() int64 {
	if o == nil || o.LastPrice == nil {
		var ret int64
		return ret
	}
	return *o.LastPrice
}

// GetLastPriceOk returns a tuple with the LastPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetLastPriceOk() (*int64, bool) {
	if o == nil || o.LastPrice == nil {
		return nil, false
	}
	return o.LastPrice, true
}

// HasLastPrice returns a boolean if a field has been set.
func (o *Market) HasLastPrice() bool {
	if o != nil && o.LastPrice != nil {
		return true
	}

	return false
}

// SetLastPrice gets a reference to the given int64 and assigns it to the LastPrice field.
func (o *Market) SetLastPrice(v int64) {
	o.LastPrice = &v
}

// GetLiquidity returns the Liquidity field value if set, zero value otherwise.
func (o *Market) GetLiquidity() int64 {
	if o == nil || o.Liquidity == nil {
		var ret int64
		return ret
	}
	return *o.Liquidity
}

// GetLiquidityOk returns a tuple with the Liquidity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetLiquidityOk() (*int64, bool) {
	if o == nil || o.Liquidity == nil {
		return nil, false
	}
	return o.Liquidity, true
}

// HasLiquidity returns a boolean if a field has been set.
func (o *Market) HasLiquidity() bool {
	if o != nil && o.Liquidity != nil {
		return true
	}

	return false
}

// SetLiquidity gets a reference to the given int64 and assigns it to the Liquidity field.
func (o *Market) SetLiquidity(v int64) {
	o.Liquidity = &v
}

// GetListDate returns the ListDate field value if set, zero value otherwise.
func (o *Market) GetListDate() time.Time {
	if o == nil || o.ListDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ListDate
}

// GetListDateOk returns a tuple with the ListDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetListDateOk() (*time.Time, bool) {
	if o == nil || o.ListDate == nil {
		return nil, false
	}
	return o.ListDate, true
}

// HasListDate returns a boolean if a field has been set.
func (o *Market) HasListDate() bool {
	if o != nil && o.ListDate != nil {
		return true
	}

	return false
}

// SetListDate gets a reference to the given time.Time and assigns it to the ListDate field.
func (o *Market) SetListDate(v time.Time) {
	o.ListDate = &v
}

// GetMetricsTags returns the MetricsTags field value if set, zero value otherwise.
func (o *Market) GetMetricsTags() []string {
	if o == nil || o.MetricsTags == nil {
		var ret []string
		return ret
	}
	return o.MetricsTags
}

// GetMetricsTagsOk returns a tuple with the MetricsTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetMetricsTagsOk() ([]string, bool) {
	if o == nil || o.MetricsTags == nil {
		return nil, false
	}
	return o.MetricsTags, true
}

// HasMetricsTags returns a boolean if a field has been set.
func (o *Market) HasMetricsTags() bool {
	if o != nil && o.MetricsTags != nil {
		return true
	}

	return false
}

// SetMetricsTags gets a reference to the given []string and assigns it to the MetricsTags field.
func (o *Market) SetMetricsTags(v []string) {
	o.MetricsTags = v
}

// GetMinTickSize returns the MinTickSize field value if set, zero value otherwise.
func (o *Market) GetMinTickSize() string {
	if o == nil || o.MinTickSize == nil {
		var ret string
		return ret
	}
	return *o.MinTickSize
}

// GetMinTickSizeOk returns a tuple with the MinTickSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetMinTickSizeOk() (*string, bool) {
	if o == nil || o.MinTickSize == nil {
		return nil, false
	}
	return o.MinTickSize, true
}

// HasMinTickSize returns a boolean if a field has been set.
func (o *Market) HasMinTickSize() bool {
	if o != nil && o.MinTickSize != nil {
		return true
	}

	return false
}

// SetMinTickSize gets a reference to the given string and assigns it to the MinTickSize field.
func (o *Market) SetMinTickSize(v string) {
	o.MinTickSize = &v
}

// GetMiniTitle returns the MiniTitle field value if set, zero value otherwise.
func (o *Market) GetMiniTitle() string {
	if o == nil || o.MiniTitle == nil {
		var ret string
		return ret
	}
	return *o.MiniTitle
}

// GetMiniTitleOk returns a tuple with the MiniTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetMiniTitleOk() (*string, bool) {
	if o == nil || o.MiniTitle == nil {
		return nil, false
	}
	return o.MiniTitle, true
}

// HasMiniTitle returns a boolean if a field has been set.
func (o *Market) HasMiniTitle() bool {
	if o != nil && o.MiniTitle != nil {
		return true
	}

	return false
}

// SetMiniTitle gets a reference to the given string and assigns it to the MiniTitle field.
func (o *Market) SetMiniTitle(v string) {
	o.MiniTitle = &v
}

// GetOpenDate returns the OpenDate field value if set, zero value otherwise.
func (o *Market) GetOpenDate() time.Time {
	if o == nil || o.OpenDate == nil {
		var ret time.Time
		return ret
	}
	return *o.OpenDate
}

// GetOpenDateOk returns a tuple with the OpenDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetOpenDateOk() (*time.Time, bool) {
	if o == nil || o.OpenDate == nil {
		return nil, false
	}
	return o.OpenDate, true
}

// HasOpenDate returns a boolean if a field has been set.
func (o *Market) HasOpenDate() bool {
	if o != nil && o.OpenDate != nil {
		return true
	}

	return false
}

// SetOpenDate gets a reference to the given time.Time and assigns it to the OpenDate field.
func (o *Market) SetOpenDate(v time.Time) {
	o.OpenDate = &v
}

// GetOpenInterest returns the OpenInterest field value if set, zero value otherwise.
func (o *Market) GetOpenInterest() int64 {
	if o == nil || o.OpenInterest == nil {
		var ret int64
		return ret
	}
	return *o.OpenInterest
}

// GetOpenInterestOk returns a tuple with the OpenInterest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetOpenInterestOk() (*int64, bool) {
	if o == nil || o.OpenInterest == nil {
		return nil, false
	}
	return o.OpenInterest, true
}

// HasOpenInterest returns a boolean if a field has been set.
func (o *Market) HasOpenInterest() bool {
	if o != nil && o.OpenInterest != nil {
		return true
	}

	return false
}

// SetOpenInterest gets a reference to the given int64 and assigns it to the OpenInterest field.
func (o *Market) SetOpenInterest(v int64) {
	o.OpenInterest = &v
}

// GetOptionType returns the OptionType field value if set, zero value otherwise.
func (o *Market) GetOptionType() string {
	if o == nil || o.OptionType == nil {
		var ret string
		return ret
	}
	return *o.OptionType
}

// GetOptionTypeOk returns a tuple with the OptionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetOptionTypeOk() (*string, bool) {
	if o == nil || o.OptionType == nil {
		return nil, false
	}
	return o.OptionType, true
}

// HasOptionType returns a boolean if a field has been set.
func (o *Market) HasOptionType() bool {
	if o != nil && o.OptionType != nil {
		return true
	}

	return false
}

// SetOptionType gets a reference to the given string and assigns it to the OptionType field.
func (o *Market) SetOptionType(v string) {
	o.OptionType = &v
}

// GetOriginalExpirationDate returns the OriginalExpirationDate field value if set, zero value otherwise.
func (o *Market) GetOriginalExpirationDate() time.Time {
	if o == nil || o.OriginalExpirationDate == nil {
		var ret time.Time
		return ret
	}
	return *o.OriginalExpirationDate
}

// GetOriginalExpirationDateOk returns a tuple with the OriginalExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetOriginalExpirationDateOk() (*time.Time, bool) {
	if o == nil || o.OriginalExpirationDate == nil {
		return nil, false
	}
	return o.OriginalExpirationDate, true
}

// HasOriginalExpirationDate returns a boolean if a field has been set.
func (o *Market) HasOriginalExpirationDate() bool {
	if o != nil && o.OriginalExpirationDate != nil {
		return true
	}

	return false
}

// SetOriginalExpirationDate gets a reference to the given time.Time and assigns it to the OriginalExpirationDate field.
func (o *Market) SetOriginalExpirationDate(v time.Time) {
	o.OriginalExpirationDate = &v
}

// GetPreviousPrice returns the PreviousPrice field value if set, zero value otherwise.
func (o *Market) GetPreviousPrice() int64 {
	if o == nil || o.PreviousPrice == nil {
		var ret int64
		return ret
	}
	return *o.PreviousPrice
}

// GetPreviousPriceOk returns a tuple with the PreviousPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetPreviousPriceOk() (*int64, bool) {
	if o == nil || o.PreviousPrice == nil {
		return nil, false
	}
	return o.PreviousPrice, true
}

// HasPreviousPrice returns a boolean if a field has been set.
func (o *Market) HasPreviousPrice() bool {
	if o != nil && o.PreviousPrice != nil {
		return true
	}

	return false
}

// SetPreviousPrice gets a reference to the given int64 and assigns it to the PreviousPrice field.
func (o *Market) SetPreviousPrice(v int64) {
	o.PreviousPrice = &v
}

// GetPreviousYesAsk returns the PreviousYesAsk field value if set, zero value otherwise.
func (o *Market) GetPreviousYesAsk() int64 {
	if o == nil || o.PreviousYesAsk == nil {
		var ret int64
		return ret
	}
	return *o.PreviousYesAsk
}

// GetPreviousYesAskOk returns a tuple with the PreviousYesAsk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetPreviousYesAskOk() (*int64, bool) {
	if o == nil || o.PreviousYesAsk == nil {
		return nil, false
	}
	return o.PreviousYesAsk, true
}

// HasPreviousYesAsk returns a boolean if a field has been set.
func (o *Market) HasPreviousYesAsk() bool {
	if o != nil && o.PreviousYesAsk != nil {
		return true
	}

	return false
}

// SetPreviousYesAsk gets a reference to the given int64 and assigns it to the PreviousYesAsk field.
func (o *Market) SetPreviousYesAsk(v int64) {
	o.PreviousYesAsk = &v
}

// GetPreviousYesBid returns the PreviousYesBid field value if set, zero value otherwise.
func (o *Market) GetPreviousYesBid() int64 {
	if o == nil || o.PreviousYesBid == nil {
		var ret int64
		return ret
	}
	return *o.PreviousYesBid
}

// GetPreviousYesBidOk returns a tuple with the PreviousYesBid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetPreviousYesBidOk() (*int64, bool) {
	if o == nil || o.PreviousYesBid == nil {
		return nil, false
	}
	return o.PreviousYesBid, true
}

// HasPreviousYesBid returns a boolean if a field has been set.
func (o *Market) HasPreviousYesBid() bool {
	if o != nil && o.PreviousYesBid != nil {
		return true
	}

	return false
}

// SetPreviousYesBid gets a reference to the given int64 and assigns it to the PreviousYesBid field.
func (o *Market) SetPreviousYesBid(v int64) {
	o.PreviousYesBid = &v
}

// GetRangedGroupName returns the RangedGroupName field value if set, zero value otherwise.
func (o *Market) GetRangedGroupName() string {
	if o == nil || o.RangedGroupName == nil {
		var ret string
		return ret
	}
	return *o.RangedGroupName
}

// GetRangedGroupNameOk returns a tuple with the RangedGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetRangedGroupNameOk() (*string, bool) {
	if o == nil || o.RangedGroupName == nil {
		return nil, false
	}
	return o.RangedGroupName, true
}

// HasRangedGroupName returns a boolean if a field has been set.
func (o *Market) HasRangedGroupName() bool {
	if o != nil && o.RangedGroupName != nil {
		return true
	}

	return false
}

// SetRangedGroupName gets a reference to the given string and assigns it to the RangedGroupName field.
func (o *Market) SetRangedGroupName(v string) {
	o.RangedGroupName = &v
}

// GetRangedGroupTicker returns the RangedGroupTicker field value if set, zero value otherwise.
func (o *Market) GetRangedGroupTicker() string {
	if o == nil || o.RangedGroupTicker == nil {
		var ret string
		return ret
	}
	return *o.RangedGroupTicker
}

// GetRangedGroupTickerOk returns a tuple with the RangedGroupTicker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetRangedGroupTickerOk() (*string, bool) {
	if o == nil || o.RangedGroupTicker == nil {
		return nil, false
	}
	return o.RangedGroupTicker, true
}

// HasRangedGroupTicker returns a boolean if a field has been set.
func (o *Market) HasRangedGroupTicker() bool {
	if o != nil && o.RangedGroupTicker != nil {
		return true
	}

	return false
}

// SetRangedGroupTicker gets a reference to the given string and assigns it to the RangedGroupTicker field.
func (o *Market) SetRangedGroupTicker(v string) {
	o.RangedGroupTicker = &v
}

// GetRecentVolume returns the RecentVolume field value if set, zero value otherwise.
func (o *Market) GetRecentVolume() int64 {
	if o == nil || o.RecentVolume == nil {
		var ret int64
		return ret
	}
	return *o.RecentVolume
}

// GetRecentVolumeOk returns a tuple with the RecentVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetRecentVolumeOk() (*int64, bool) {
	if o == nil || o.RecentVolume == nil {
		return nil, false
	}
	return o.RecentVolume, true
}

// HasRecentVolume returns a boolean if a field has been set.
func (o *Market) HasRecentVolume() bool {
	if o != nil && o.RecentVolume != nil {
		return true
	}

	return false
}

// SetRecentVolume gets a reference to the given int64 and assigns it to the RecentVolume field.
func (o *Market) SetRecentVolume(v int64) {
	o.RecentVolume = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *Market) GetResult() string {
	if o == nil || o.Result == nil {
		var ret string
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetResultOk() (*string, bool) {
	if o == nil || o.Result == nil {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *Market) HasResult() bool {
	if o != nil && o.Result != nil {
		return true
	}

	return false
}

// SetResult gets a reference to the given string and assigns it to the Result field.
func (o *Market) SetResult(v string) {
	o.Result = &v
}

// GetRulebookVariables returns the RulebookVariables field value if set, zero value otherwise.
func (o *Market) GetRulebookVariables() map[string]string {
	if o == nil || o.RulebookVariables == nil {
		var ret map[string]string
		return ret
	}
	return *o.RulebookVariables
}

// GetRulebookVariablesOk returns a tuple with the RulebookVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetRulebookVariablesOk() (*map[string]string, bool) {
	if o == nil || o.RulebookVariables == nil {
		return nil, false
	}
	return o.RulebookVariables, true
}

// HasRulebookVariables returns a boolean if a field has been set.
func (o *Market) HasRulebookVariables() bool {
	if o != nil && o.RulebookVariables != nil {
		return true
	}

	return false
}

// SetRulebookVariables gets a reference to the given map[string]string and assigns it to the RulebookVariables field.
func (o *Market) SetRulebookVariables(v map[string]string) {
	o.RulebookVariables = &v
}

// GetSettleDetails returns the SettleDetails field value if set, zero value otherwise.
func (o *Market) GetSettleDetails() string {
	if o == nil || o.SettleDetails == nil {
		var ret string
		return ret
	}
	return *o.SettleDetails
}

// GetSettleDetailsOk returns a tuple with the SettleDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetSettleDetailsOk() (*string, bool) {
	if o == nil || o.SettleDetails == nil {
		return nil, false
	}
	return o.SettleDetails, true
}

// HasSettleDetails returns a boolean if a field has been set.
func (o *Market) HasSettleDetails() bool {
	if o != nil && o.SettleDetails != nil {
		return true
	}

	return false
}

// SetSettleDetails gets a reference to the given string and assigns it to the SettleDetails field.
func (o *Market) SetSettleDetails(v string) {
	o.SettleDetails = &v
}

// GetSettlementSources returns the SettlementSources field value if set, zero value otherwise.
func (o *Market) GetSettlementSources() []SettlementSource {
	if o == nil || o.SettlementSources == nil {
		var ret []SettlementSource
		return ret
	}
	return o.SettlementSources
}

// GetSettlementSourcesOk returns a tuple with the SettlementSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetSettlementSourcesOk() ([]SettlementSource, bool) {
	if o == nil || o.SettlementSources == nil {
		return nil, false
	}
	return o.SettlementSources, true
}

// HasSettlementSources returns a boolean if a field has been set.
func (o *Market) HasSettlementSources() bool {
	if o != nil && o.SettlementSources != nil {
		return true
	}

	return false
}

// SetSettlementSources gets a reference to the given []SettlementSource and assigns it to the SettlementSources field.
func (o *Market) SetSettlementSources(v []SettlementSource) {
	o.SettlementSources = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Market) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Market) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Market) SetStatus(v string) {
	o.Status = &v
}

// GetStrikePrice returns the StrikePrice field value if set, zero value otherwise.
func (o *Market) GetStrikePrice() float64 {
	if o == nil || o.StrikePrice == nil {
		var ret float64
		return ret
	}
	return *o.StrikePrice
}

// GetStrikePriceOk returns a tuple with the StrikePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetStrikePriceOk() (*float64, bool) {
	if o == nil || o.StrikePrice == nil {
		return nil, false
	}
	return o.StrikePrice, true
}

// HasStrikePrice returns a boolean if a field has been set.
func (o *Market) HasStrikePrice() bool {
	if o != nil && o.StrikePrice != nil {
		return true
	}

	return false
}

// SetStrikePrice gets a reference to the given float64 and assigns it to the StrikePrice field.
func (o *Market) SetStrikePrice(v float64) {
	o.StrikePrice = &v
}

// GetSubTitle returns the SubTitle field value if set, zero value otherwise.
func (o *Market) GetSubTitle() string {
	if o == nil || o.SubTitle == nil {
		var ret string
		return ret
	}
	return *o.SubTitle
}

// GetSubTitleOk returns a tuple with the SubTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetSubTitleOk() (*string, bool) {
	if o == nil || o.SubTitle == nil {
		return nil, false
	}
	return o.SubTitle, true
}

// HasSubTitle returns a boolean if a field has been set.
func (o *Market) HasSubTitle() bool {
	if o != nil && o.SubTitle != nil {
		return true
	}

	return false
}

// SetSubTitle gets a reference to the given string and assigns it to the SubTitle field.
func (o *Market) SetSubTitle(v string) {
	o.SubTitle = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Market) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetTagsOk() ([]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Market) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Market) SetTags(v []string) {
	o.Tags = v
}

// GetTickerName returns the TickerName field value if set, zero value otherwise.
func (o *Market) GetTickerName() string {
	if o == nil || o.TickerName == nil {
		var ret string
		return ret
	}
	return *o.TickerName
}

// GetTickerNameOk returns a tuple with the TickerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetTickerNameOk() (*string, bool) {
	if o == nil || o.TickerName == nil {
		return nil, false
	}
	return o.TickerName, true
}

// HasTickerName returns a boolean if a field has been set.
func (o *Market) HasTickerName() bool {
	if o != nil && o.TickerName != nil {
		return true
	}

	return false
}

// SetTickerName gets a reference to the given string and assigns it to the TickerName field.
func (o *Market) SetTickerName(v string) {
	o.TickerName = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Market) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Market) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Market) SetTitle(v string) {
	o.Title = &v
}

// GetUnderlying returns the Underlying field value if set, zero value otherwise.
func (o *Market) GetUnderlying() string {
	if o == nil || o.Underlying == nil {
		var ret string
		return ret
	}
	return *o.Underlying
}

// GetUnderlyingOk returns a tuple with the Underlying field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetUnderlyingOk() (*string, bool) {
	if o == nil || o.Underlying == nil {
		return nil, false
	}
	return o.Underlying, true
}

// HasUnderlying returns a boolean if a field has been set.
func (o *Market) HasUnderlying() bool {
	if o != nil && o.Underlying != nil {
		return true
	}

	return false
}

// SetUnderlying gets a reference to the given string and assigns it to the Underlying field.
func (o *Market) SetUnderlying(v string) {
	o.Underlying = &v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *Market) GetVolume() int64 {
	if o == nil || o.Volume == nil {
		var ret int64
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetVolumeOk() (*int64, bool) {
	if o == nil || o.Volume == nil {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *Market) HasVolume() bool {
	if o != nil && o.Volume != nil {
		return true
	}

	return false
}

// SetVolume gets a reference to the given int64 and assigns it to the Volume field.
func (o *Market) SetVolume(v int64) {
	o.Volume = &v
}

// GetYesAsk returns the YesAsk field value if set, zero value otherwise.
func (o *Market) GetYesAsk() int64 {
	if o == nil || o.YesAsk == nil {
		var ret int64
		return ret
	}
	return *o.YesAsk
}

// GetYesAskOk returns a tuple with the YesAsk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetYesAskOk() (*int64, bool) {
	if o == nil || o.YesAsk == nil {
		return nil, false
	}
	return o.YesAsk, true
}

// HasYesAsk returns a boolean if a field has been set.
func (o *Market) HasYesAsk() bool {
	if o != nil && o.YesAsk != nil {
		return true
	}

	return false
}

// SetYesAsk gets a reference to the given int64 and assigns it to the YesAsk field.
func (o *Market) SetYesAsk(v int64) {
	o.YesAsk = &v
}

// GetYesBid returns the YesBid field value if set, zero value otherwise.
func (o *Market) GetYesBid() int64 {
	if o == nil || o.YesBid == nil {
		var ret int64
		return ret
	}
	return *o.YesBid
}

// GetYesBidOk returns a tuple with the YesBid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetYesBidOk() (*int64, bool) {
	if o == nil || o.YesBid == nil {
		return nil, false
	}
	return o.YesBid, true
}

// HasYesBid returns a boolean if a field has been set.
func (o *Market) HasYesBid() bool {
	if o != nil && o.YesBid != nil {
		return true
	}

	return false
}

// SetYesBid gets a reference to the given int64 and assigns it to the YesBid field.
func (o *Market) SetYesBid(v int64) {
	o.YesBid = &v
}

func (o Market) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CanCloseEarly != nil {
		toSerialize["can_close_early"] = o.CanCloseEarly
	}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	if o.CloseDate != nil {
		toSerialize["close_date"] = o.CloseDate
	}
	if o.CloseUnconfirmed != nil {
		toSerialize["close_unconfirmed"] = o.CloseUnconfirmed
	}
	if o.CreateDate != nil {
		toSerialize["create_date"] = o.CreateDate
	}
	if o.DescriptionCaseNo != nil {
		toSerialize["description_case_no"] = o.DescriptionCaseNo
	}
	if o.DescriptionCaseYes != nil {
		toSerialize["description_case_yes"] = o.DescriptionCaseYes
	}
	if o.DescriptionContext != nil {
		toSerialize["description_context"] = o.DescriptionContext
	}
	if o.DollarOpenInterest != nil {
		toSerialize["dollar_open_interest"] = o.DollarOpenInterest
	}
	if o.DollarRecentVolume != nil {
		toSerialize["dollar_recent_volume"] = o.DollarRecentVolume
	}
	if o.DollarVolume != nil {
		toSerialize["dollar_volume"] = o.DollarVolume
	}
	if o.ExpirationDate != nil {
		toSerialize["expiration_date"] = o.ExpirationDate
	}
	if o.ExpirationValue != nil {
		toSerialize["expiration_value"] = o.ExpirationValue
	}
	if o.FrequencyInDays != nil {
		toSerialize["frequency_in_days"] = o.FrequencyInDays
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ImageUrl != nil {
		toSerialize["image_url"] = o.ImageUrl
	}
	if o.LastPrice != nil {
		toSerialize["last_price"] = o.LastPrice
	}
	if o.Liquidity != nil {
		toSerialize["liquidity"] = o.Liquidity
	}
	if o.ListDate != nil {
		toSerialize["list_date"] = o.ListDate
	}
	if o.MetricsTags != nil {
		toSerialize["metrics_tags"] = o.MetricsTags
	}
	if o.MinTickSize != nil {
		toSerialize["min_tick_size"] = o.MinTickSize
	}
	if o.MiniTitle != nil {
		toSerialize["mini_title"] = o.MiniTitle
	}
	if o.OpenDate != nil {
		toSerialize["open_date"] = o.OpenDate
	}
	if o.OpenInterest != nil {
		toSerialize["open_interest"] = o.OpenInterest
	}
	if o.OptionType != nil {
		toSerialize["option_type"] = o.OptionType
	}
	if o.OriginalExpirationDate != nil {
		toSerialize["original_expiration_date"] = o.OriginalExpirationDate
	}
	if o.PreviousPrice != nil {
		toSerialize["previous_price"] = o.PreviousPrice
	}
	if o.PreviousYesAsk != nil {
		toSerialize["previous_yes_ask"] = o.PreviousYesAsk
	}
	if o.PreviousYesBid != nil {
		toSerialize["previous_yes_bid"] = o.PreviousYesBid
	}
	if o.RangedGroupName != nil {
		toSerialize["ranged_group_name"] = o.RangedGroupName
	}
	if o.RangedGroupTicker != nil {
		toSerialize["ranged_group_ticker"] = o.RangedGroupTicker
	}
	if o.RecentVolume != nil {
		toSerialize["recent_volume"] = o.RecentVolume
	}
	if o.Result != nil {
		toSerialize["result"] = o.Result
	}
	if o.RulebookVariables != nil {
		toSerialize["rulebook_variables"] = o.RulebookVariables
	}
	if o.SettleDetails != nil {
		toSerialize["settle_details"] = o.SettleDetails
	}
	if o.SettlementSources != nil {
		toSerialize["settlement_sources"] = o.SettlementSources
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.StrikePrice != nil {
		toSerialize["strike_price"] = o.StrikePrice
	}
	if o.SubTitle != nil {
		toSerialize["sub_title"] = o.SubTitle
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.TickerName != nil {
		toSerialize["ticker_name"] = o.TickerName
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Underlying != nil {
		toSerialize["underlying"] = o.Underlying
	}
	if o.Volume != nil {
		toSerialize["volume"] = o.Volume
	}
	if o.YesAsk != nil {
		toSerialize["yes_ask"] = o.YesAsk
	}
	if o.YesBid != nil {
		toSerialize["yes_bid"] = o.YesBid
	}
	return json.Marshal(toSerialize)
}

type NullableMarket struct {
	value *Market
	isSet bool
}

func (v NullableMarket) Get() *Market {
	return v.value
}

func (v *NullableMarket) Set(val *Market) {
	v.value = val
	v.isSet = true
}

func (v NullableMarket) IsSet() bool {
	return v.isSet
}

func (v *NullableMarket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarket(val *Market) *NullableMarket {
	return &NullableMarket{value: val, isSet: true}
}

func (v NullableMarket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Kalshi API.

This documentation describes Kalshi's REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kalshiAPI

import (
	"encoding/json"
	"time"
)

// Series struct for Series
type Series struct {
	FirstOpenDate *time.Time `json:"first_open_date,omitempty"`
	Frequency *string `json:"frequency,omitempty"`
	Ticker *string `json:"ticker,omitempty"`
	Title *string `json:"title,omitempty"`
}

// NewSeries instantiates a new Series object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSeries() *Series {
	this := Series{}
	return &this
}

// NewSeriesWithDefaults instantiates a new Series object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSeriesWithDefaults() *Series {
	this := Series{}
	return &this
}

// GetFirstOpenDate returns the FirstOpenDate field value if set, zero value otherwise.
func (o *Series) GetFirstOpenDate() time.Time {
	if o == nil || o.FirstOpenDate == nil {
		var ret time.Time
		return ret
	}
	return *o.FirstOpenDate
}

// GetFirstOpenDateOk returns a tuple with the FirstOpenDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Series) GetFirstOpenDateOk() (*time.Time, bool) {
	if o == nil || o.FirstOpenDate == nil {
		return nil, false
	}
	return o.FirstOpenDate, true
}

// HasFirstOpenDate returns a boolean if a field has been set.
func (o *Series) HasFirstOpenDate() bool {
	if o != nil && o.FirstOpenDate != nil {
		return true
	}

	return false
}

// SetFirstOpenDate gets a reference to the given time.Time and assigns it to the FirstOpenDate field.
func (o *Series) SetFirstOpenDate(v time.Time) {
	o.FirstOpenDate = &v
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *Series) GetFrequency() string {
	if o == nil || o.Frequency == nil {
		var ret string
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Series) GetFrequencyOk() (*string, bool) {
	if o == nil || o.Frequency == nil {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *Series) HasFrequency() bool {
	if o != nil && o.Frequency != nil {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given string and assigns it to the Frequency field.
func (o *Series) SetFrequency(v string) {
	o.Frequency = &v
}

// GetTicker returns the Ticker field value if set, zero value otherwise.
func (o *Series) GetTicker() string {
	if o == nil || o.Ticker == nil {
		var ret string
		return ret
	}
	return *o.Ticker
}

// GetTickerOk returns a tuple with the Ticker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Series) GetTickerOk() (*string, bool) {
	if o == nil || o.Ticker == nil {
		return nil, false
	}
	return o.Ticker, true
}

// HasTicker returns a boolean if a field has been set.
func (o *Series) HasTicker() bool {
	if o != nil && o.Ticker != nil {
		return true
	}

	return false
}

// SetTicker gets a reference to the given string and assigns it to the Ticker field.
func (o *Series) SetTicker(v string) {
	o.Ticker = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Series) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Series) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Series) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Series) SetTitle(v string) {
	o.Title = &v
}

func (o Series) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FirstOpenDate != nil {
		toSerialize["first_open_date"] = o.FirstOpenDate
	}
	if o.Frequency != nil {
		toSerialize["frequency"] = o.Frequency
	}
	if o.Ticker != nil {
		toSerialize["ticker"] = o.Ticker
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	return json.Marshal(toSerialize)
}

type NullableSeries struct {
	value *Series
	isSet bool
}

func (v NullableSeries) Get() *Series {
	return v.value
}

func (v *NullableSeries) Set(val *Series) {
	v.value = val
	v.isSet = true
}

func (v NullableSeries) IsSet() bool {
	return v.isSet
}

func (v *NullableSeries) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSeries(val *Series) *NullableSeries {
	return &NullableSeries{value: val, isSet: true}
}

func (v NullableSeries) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSeries) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



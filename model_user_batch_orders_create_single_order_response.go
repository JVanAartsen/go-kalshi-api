/*
Kalshi API.

This documentation describes Kalshi's REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kalshiAPI

import (
	"encoding/json"
)

// UserBatchOrdersCreateSingleOrderResponse Response for submitting an order
type UserBatchOrdersCreateSingleOrderResponse struct {
	Error *JSONError `json:"error,omitempty"`
	Order *Order `json:"order,omitempty"`
	// Status of the order submit operation
	Status *string `json:"status,omitempty"`
}

// NewUserBatchOrdersCreateSingleOrderResponse instantiates a new UserBatchOrdersCreateSingleOrderResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserBatchOrdersCreateSingleOrderResponse() *UserBatchOrdersCreateSingleOrderResponse {
	this := UserBatchOrdersCreateSingleOrderResponse{}
	return &this
}

// NewUserBatchOrdersCreateSingleOrderResponseWithDefaults instantiates a new UserBatchOrdersCreateSingleOrderResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserBatchOrdersCreateSingleOrderResponseWithDefaults() *UserBatchOrdersCreateSingleOrderResponse {
	this := UserBatchOrdersCreateSingleOrderResponse{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *UserBatchOrdersCreateSingleOrderResponse) GetError() JSONError {
	if o == nil || o.Error == nil {
		var ret JSONError
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserBatchOrdersCreateSingleOrderResponse) GetErrorOk() (*JSONError, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *UserBatchOrdersCreateSingleOrderResponse) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given JSONError and assigns it to the Error field.
func (o *UserBatchOrdersCreateSingleOrderResponse) SetError(v JSONError) {
	o.Error = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *UserBatchOrdersCreateSingleOrderResponse) GetOrder() Order {
	if o == nil || o.Order == nil {
		var ret Order
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserBatchOrdersCreateSingleOrderResponse) GetOrderOk() (*Order, bool) {
	if o == nil || o.Order == nil {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *UserBatchOrdersCreateSingleOrderResponse) HasOrder() bool {
	if o != nil && o.Order != nil {
		return true
	}

	return false
}

// SetOrder gets a reference to the given Order and assigns it to the Order field.
func (o *UserBatchOrdersCreateSingleOrderResponse) SetOrder(v Order) {
	o.Order = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *UserBatchOrdersCreateSingleOrderResponse) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserBatchOrdersCreateSingleOrderResponse) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *UserBatchOrdersCreateSingleOrderResponse) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *UserBatchOrdersCreateSingleOrderResponse) SetStatus(v string) {
	o.Status = &v
}

func (o UserBatchOrdersCreateSingleOrderResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.Order != nil {
		toSerialize["order"] = o.Order
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableUserBatchOrdersCreateSingleOrderResponse struct {
	value *UserBatchOrdersCreateSingleOrderResponse
	isSet bool
}

func (v NullableUserBatchOrdersCreateSingleOrderResponse) Get() *UserBatchOrdersCreateSingleOrderResponse {
	return v.value
}

func (v *NullableUserBatchOrdersCreateSingleOrderResponse) Set(val *UserBatchOrdersCreateSingleOrderResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserBatchOrdersCreateSingleOrderResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserBatchOrdersCreateSingleOrderResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserBatchOrdersCreateSingleOrderResponse(val *UserBatchOrdersCreateSingleOrderResponse) *NullableUserBatchOrdersCreateSingleOrderResponse {
	return &NullableUserBatchOrdersCreateSingleOrderResponse{value: val, isSet: true}
}

func (v NullableUserBatchOrdersCreateSingleOrderResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserBatchOrdersCreateSingleOrderResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



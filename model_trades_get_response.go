/*
Kalshi API.

This documentation describes Kalshi's REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kalshiAPI

import (
	"encoding/json"
)

// TradesGetResponse struct for TradesGetResponse
type TradesGetResponse struct {
	Trades []PublicTrade `json:"trades"`
}

// NewTradesGetResponse instantiates a new TradesGetResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTradesGetResponse(trades []PublicTrade) *TradesGetResponse {
	this := TradesGetResponse{}
	this.Trades = trades
	return &this
}

// NewTradesGetResponseWithDefaults instantiates a new TradesGetResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTradesGetResponseWithDefaults() *TradesGetResponse {
	this := TradesGetResponse{}
	return &this
}

// GetTrades returns the Trades field value
func (o *TradesGetResponse) GetTrades() []PublicTrade {
	if o == nil {
		var ret []PublicTrade
		return ret
	}

	return o.Trades
}

// GetTradesOk returns a tuple with the Trades field value
// and a boolean to check if the value has been set.
func (o *TradesGetResponse) GetTradesOk() ([]PublicTrade, bool) {
	if o == nil {
		return nil, false
	}
	return o.Trades, true
}

// SetTrades sets field value
func (o *TradesGetResponse) SetTrades(v []PublicTrade) {
	o.Trades = v
}

func (o TradesGetResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["trades"] = o.Trades
	}
	return json.Marshal(toSerialize)
}

type NullableTradesGetResponse struct {
	value *TradesGetResponse
	isSet bool
}

func (v NullableTradesGetResponse) Get() *TradesGetResponse {
	return v.value
}

func (v *NullableTradesGetResponse) Set(val *TradesGetResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTradesGetResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTradesGetResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTradesGetResponse(val *TradesGetResponse) *NullableTradesGetResponse {
	return &NullableTradesGetResponse{value: val, isSet: true}
}

func (v NullableTradesGetResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTradesGetResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



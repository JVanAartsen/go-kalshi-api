/*
Kalshi API.

This documentation describes Kalshi's REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kalshiAPI

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


type PortfolioApi interface {

	/*
	DeprecatedUserGetPortfolioHistory DeprecatedUserGetPortfolioHistory

	End-point for getting the logged in user's portfolio historical track.

The value for the user_id path parameter should match the user_id value returned on the response for the last login request (POST /log_in).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId This parameter should be filled with your user_id provided on log_in
	@return ApiDeprecatedUserGetPortfolioHistoryRequest
	*/
	DeprecatedUserGetPortfolioHistory(ctx context.Context, userId string) ApiDeprecatedUserGetPortfolioHistoryRequest

	// DeprecatedUserGetPortfolioHistoryExecute executes the request
	//  @return DeprecatedUserGetPortfolioHistoryResponse
	DeprecatedUserGetPortfolioHistoryExecute(r ApiDeprecatedUserGetPortfolioHistoryRequest) (*DeprecatedUserGetPortfolioHistoryResponse, *http.Response, error)

	/*
	UserGetSampledPortfolioHistory UserGetSampledPortfolioHistory

	End-point for getting the logged in user's portfolio historical track.

The value for the user_id path parameter should match the user_id value returned on the response for the last login request (POST /log_in).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId Should be filled with your user_id provided on log_in
	@return ApiUserGetSampledPortfolioHistoryRequest
	*/
	UserGetSampledPortfolioHistory(ctx context.Context, userId string) ApiUserGetSampledPortfolioHistoryRequest

	// UserGetSampledPortfolioHistoryExecute executes the request
	//  @return UserGetSampledPortfolioHistoryResponse
	UserGetSampledPortfolioHistoryExecute(r ApiUserGetSampledPortfolioHistoryRequest) (*UserGetSampledPortfolioHistoryResponse, *http.Response, error)
}

// PortfolioApiService PortfolioApi service
type PortfolioApiService service

type ApiDeprecatedUserGetPortfolioHistoryRequest struct {
	ctx context.Context
	ApiService PortfolioApi
	userId string
	deprecatedUserGetPortfolioHistoryRequest *DeprecatedUserGetPortfolioHistoryRequest
}

// Order create input data
func (r ApiDeprecatedUserGetPortfolioHistoryRequest) DeprecatedUserGetPortfolioHistoryRequest(deprecatedUserGetPortfolioHistoryRequest DeprecatedUserGetPortfolioHistoryRequest) ApiDeprecatedUserGetPortfolioHistoryRequest {
	r.deprecatedUserGetPortfolioHistoryRequest = &deprecatedUserGetPortfolioHistoryRequest
	return r
}

func (r ApiDeprecatedUserGetPortfolioHistoryRequest) Execute() (*DeprecatedUserGetPortfolioHistoryResponse, *http.Response, error) {
	return r.ApiService.DeprecatedUserGetPortfolioHistoryExecute(r)
}

/*
DeprecatedUserGetPortfolioHistory DeprecatedUserGetPortfolioHistory

End-point for getting the logged in user's portfolio historical track.

The value for the user_id path parameter should match the user_id value returned on the response for the last login request (POST /log_in).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId This parameter should be filled with your user_id provided on log_in
 @return ApiDeprecatedUserGetPortfolioHistoryRequest
*/
func (a *PortfolioApiService) DeprecatedUserGetPortfolioHistory(ctx context.Context, userId string) ApiDeprecatedUserGetPortfolioHistoryRequest {
	return ApiDeprecatedUserGetPortfolioHistoryRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return DeprecatedUserGetPortfolioHistoryResponse
func (a *PortfolioApiService) DeprecatedUserGetPortfolioHistoryExecute(r ApiDeprecatedUserGetPortfolioHistoryRequest) (*DeprecatedUserGetPortfolioHistoryResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeprecatedUserGetPortfolioHistoryResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortfolioApiService.DeprecatedUserGetPortfolioHistory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/portfolio/"
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deprecatedUserGetPortfolioHistoryRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["cookie"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUserGetSampledPortfolioHistoryRequest struct {
	ctx context.Context
	ApiService PortfolioApi
	userId string
}

func (r ApiUserGetSampledPortfolioHistoryRequest) Execute() (*UserGetSampledPortfolioHistoryResponse, *http.Response, error) {
	return r.ApiService.UserGetSampledPortfolioHistoryExecute(r)
}

/*
UserGetSampledPortfolioHistory UserGetSampledPortfolioHistory

End-point for getting the logged in user's portfolio historical track.

The value for the user_id path parameter should match the user_id value returned on the response for the last login request (POST /log_in).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId Should be filled with your user_id provided on log_in
 @return ApiUserGetSampledPortfolioHistoryRequest
*/
func (a *PortfolioApiService) UserGetSampledPortfolioHistory(ctx context.Context, userId string) ApiUserGetSampledPortfolioHistoryRequest {
	return ApiUserGetSampledPortfolioHistoryRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return UserGetSampledPortfolioHistoryResponse
func (a *PortfolioApiService) UserGetSampledPortfolioHistoryExecute(r ApiUserGetSampledPortfolioHistoryRequest) (*UserGetSampledPortfolioHistoryResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserGetSampledPortfolioHistoryResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortfolioApiService.UserGetSampledPortfolioHistory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/sampled_portfolio/"
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["cookie"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
Kalshi API.

This documentation describes Kalshi's REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kalshiAPI

import (
	"encoding/json"
)

// AccountHistoryEntryData struct for AccountHistoryEntryData
type AccountHistoryEntryData struct {
	Credit *CreditHistory `json:"Credit,omitempty"`
	Deposit *DepositHistory `json:"Deposit,omitempty"`
	Order *OrderHistory `json:"Order,omitempty"`
	Settlement *SettlementHistory `json:"Settlement,omitempty"`
	Trade *TradeHistory `json:"Trade,omitempty"`
	Withdrawal *WithdrawalHistory `json:"Withdrawal,omitempty"`
}

// NewAccountHistoryEntryData instantiates a new AccountHistoryEntryData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountHistoryEntryData() *AccountHistoryEntryData {
	this := AccountHistoryEntryData{}
	return &this
}

// NewAccountHistoryEntryDataWithDefaults instantiates a new AccountHistoryEntryData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountHistoryEntryDataWithDefaults() *AccountHistoryEntryData {
	this := AccountHistoryEntryData{}
	return &this
}

// GetCredit returns the Credit field value if set, zero value otherwise.
func (o *AccountHistoryEntryData) GetCredit() CreditHistory {
	if o == nil || o.Credit == nil {
		var ret CreditHistory
		return ret
	}
	return *o.Credit
}

// GetCreditOk returns a tuple with the Credit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountHistoryEntryData) GetCreditOk() (*CreditHistory, bool) {
	if o == nil || o.Credit == nil {
		return nil, false
	}
	return o.Credit, true
}

// HasCredit returns a boolean if a field has been set.
func (o *AccountHistoryEntryData) HasCredit() bool {
	if o != nil && o.Credit != nil {
		return true
	}

	return false
}

// SetCredit gets a reference to the given CreditHistory and assigns it to the Credit field.
func (o *AccountHistoryEntryData) SetCredit(v CreditHistory) {
	o.Credit = &v
}

// GetDeposit returns the Deposit field value if set, zero value otherwise.
func (o *AccountHistoryEntryData) GetDeposit() DepositHistory {
	if o == nil || o.Deposit == nil {
		var ret DepositHistory
		return ret
	}
	return *o.Deposit
}

// GetDepositOk returns a tuple with the Deposit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountHistoryEntryData) GetDepositOk() (*DepositHistory, bool) {
	if o == nil || o.Deposit == nil {
		return nil, false
	}
	return o.Deposit, true
}

// HasDeposit returns a boolean if a field has been set.
func (o *AccountHistoryEntryData) HasDeposit() bool {
	if o != nil && o.Deposit != nil {
		return true
	}

	return false
}

// SetDeposit gets a reference to the given DepositHistory and assigns it to the Deposit field.
func (o *AccountHistoryEntryData) SetDeposit(v DepositHistory) {
	o.Deposit = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *AccountHistoryEntryData) GetOrder() OrderHistory {
	if o == nil || o.Order == nil {
		var ret OrderHistory
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountHistoryEntryData) GetOrderOk() (*OrderHistory, bool) {
	if o == nil || o.Order == nil {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *AccountHistoryEntryData) HasOrder() bool {
	if o != nil && o.Order != nil {
		return true
	}

	return false
}

// SetOrder gets a reference to the given OrderHistory and assigns it to the Order field.
func (o *AccountHistoryEntryData) SetOrder(v OrderHistory) {
	o.Order = &v
}

// GetSettlement returns the Settlement field value if set, zero value otherwise.
func (o *AccountHistoryEntryData) GetSettlement() SettlementHistory {
	if o == nil || o.Settlement == nil {
		var ret SettlementHistory
		return ret
	}
	return *o.Settlement
}

// GetSettlementOk returns a tuple with the Settlement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountHistoryEntryData) GetSettlementOk() (*SettlementHistory, bool) {
	if o == nil || o.Settlement == nil {
		return nil, false
	}
	return o.Settlement, true
}

// HasSettlement returns a boolean if a field has been set.
func (o *AccountHistoryEntryData) HasSettlement() bool {
	if o != nil && o.Settlement != nil {
		return true
	}

	return false
}

// SetSettlement gets a reference to the given SettlementHistory and assigns it to the Settlement field.
func (o *AccountHistoryEntryData) SetSettlement(v SettlementHistory) {
	o.Settlement = &v
}

// GetTrade returns the Trade field value if set, zero value otherwise.
func (o *AccountHistoryEntryData) GetTrade() TradeHistory {
	if o == nil || o.Trade == nil {
		var ret TradeHistory
		return ret
	}
	return *o.Trade
}

// GetTradeOk returns a tuple with the Trade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountHistoryEntryData) GetTradeOk() (*TradeHistory, bool) {
	if o == nil || o.Trade == nil {
		return nil, false
	}
	return o.Trade, true
}

// HasTrade returns a boolean if a field has been set.
func (o *AccountHistoryEntryData) HasTrade() bool {
	if o != nil && o.Trade != nil {
		return true
	}

	return false
}

// SetTrade gets a reference to the given TradeHistory and assigns it to the Trade field.
func (o *AccountHistoryEntryData) SetTrade(v TradeHistory) {
	o.Trade = &v
}

// GetWithdrawal returns the Withdrawal field value if set, zero value otherwise.
func (o *AccountHistoryEntryData) GetWithdrawal() WithdrawalHistory {
	if o == nil || o.Withdrawal == nil {
		var ret WithdrawalHistory
		return ret
	}
	return *o.Withdrawal
}

// GetWithdrawalOk returns a tuple with the Withdrawal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountHistoryEntryData) GetWithdrawalOk() (*WithdrawalHistory, bool) {
	if o == nil || o.Withdrawal == nil {
		return nil, false
	}
	return o.Withdrawal, true
}

// HasWithdrawal returns a boolean if a field has been set.
func (o *AccountHistoryEntryData) HasWithdrawal() bool {
	if o != nil && o.Withdrawal != nil {
		return true
	}

	return false
}

// SetWithdrawal gets a reference to the given WithdrawalHistory and assigns it to the Withdrawal field.
func (o *AccountHistoryEntryData) SetWithdrawal(v WithdrawalHistory) {
	o.Withdrawal = &v
}

func (o AccountHistoryEntryData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Credit != nil {
		toSerialize["Credit"] = o.Credit
	}
	if o.Deposit != nil {
		toSerialize["Deposit"] = o.Deposit
	}
	if o.Order != nil {
		toSerialize["Order"] = o.Order
	}
	if o.Settlement != nil {
		toSerialize["Settlement"] = o.Settlement
	}
	if o.Trade != nil {
		toSerialize["Trade"] = o.Trade
	}
	if o.Withdrawal != nil {
		toSerialize["Withdrawal"] = o.Withdrawal
	}
	return json.Marshal(toSerialize)
}

type NullableAccountHistoryEntryData struct {
	value *AccountHistoryEntryData
	isSet bool
}

func (v NullableAccountHistoryEntryData) Get() *AccountHistoryEntryData {
	return v.value
}

func (v *NullableAccountHistoryEntryData) Set(val *AccountHistoryEntryData) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountHistoryEntryData) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountHistoryEntryData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountHistoryEntryData(val *AccountHistoryEntryData) *NullableAccountHistoryEntryData {
	return &NullableAccountHistoryEntryData{value: val, isSet: true}
}

func (v NullableAccountHistoryEntryData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountHistoryEntryData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Kalshi API.

This documentation describes Kalshi's REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kalshiAPI

import (
	"encoding/json"
)

// OrderBook OrderBook Contains the number of pending resting order for each price on a specific market.
type OrderBook struct {
	No [][]int32 `json:"no"`
	Yes [][]int32 `json:"yes"`
}

// NewOrderBook instantiates a new OrderBook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderBook(no [][]int32, yes [][]int32) *OrderBook {
	this := OrderBook{}
	this.No = no
	this.Yes = yes
	return &this
}

// NewOrderBookWithDefaults instantiates a new OrderBook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderBookWithDefaults() *OrderBook {
	this := OrderBook{}
	return &this
}

// GetNo returns the No field value
func (o *OrderBook) GetNo() [][]int32 {
	if o == nil {
		var ret [][]int32
		return ret
	}

	return o.No
}

// GetNoOk returns a tuple with the No field value
// and a boolean to check if the value has been set.
func (o *OrderBook) GetNoOk() ([][]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.No, true
}

// SetNo sets field value
func (o *OrderBook) SetNo(v [][]int32) {
	o.No = v
}

// GetYes returns the Yes field value
func (o *OrderBook) GetYes() [][]int32 {
	if o == nil {
		var ret [][]int32
		return ret
	}

	return o.Yes
}

// GetYesOk returns a tuple with the Yes field value
// and a boolean to check if the value has been set.
func (o *OrderBook) GetYesOk() ([][]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Yes, true
}

// SetYes sets field value
func (o *OrderBook) SetYes(v [][]int32) {
	o.Yes = v
}

func (o OrderBook) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["no"] = o.No
	}
	if true {
		toSerialize["yes"] = o.Yes
	}
	return json.Marshal(toSerialize)
}

type NullableOrderBook struct {
	value *OrderBook
	isSet bool
}

func (v NullableOrderBook) Get() *OrderBook {
	return v.value
}

func (v *NullableOrderBook) Set(val *OrderBook) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderBook) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderBook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderBook(val *OrderBook) *NullableOrderBook {
	return &NullableOrderBook{value: val, isSet: true}
}

func (v NullableOrderBook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderBook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



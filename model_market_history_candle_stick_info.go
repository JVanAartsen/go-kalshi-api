/*
Kalshi API.

This documentation describes Kalshi's REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kalshiAPI

import (
	"encoding/json"
)

// MarketHistoryCandleStickInfo struct for MarketHistoryCandleStickInfo
type MarketHistoryCandleStickInfo struct {
	EndTs *int64 `json:"EndTs,omitempty"`
	OpenInterest *int64 `json:"OpenInterest,omitempty"`
	Price *OLHCM `json:"Price,omitempty"`
	StartTs *int64 `json:"StartTs,omitempty"`
	Volume *int64 `json:"Volume,omitempty"`
	YesAsk *OLHCM `json:"YesAsk,omitempty"`
	YesBid *OLHCM `json:"YesBid,omitempty"`
}

// NewMarketHistoryCandleStickInfo instantiates a new MarketHistoryCandleStickInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarketHistoryCandleStickInfo() *MarketHistoryCandleStickInfo {
	this := MarketHistoryCandleStickInfo{}
	return &this
}

// NewMarketHistoryCandleStickInfoWithDefaults instantiates a new MarketHistoryCandleStickInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarketHistoryCandleStickInfoWithDefaults() *MarketHistoryCandleStickInfo {
	this := MarketHistoryCandleStickInfo{}
	return &this
}

// GetEndTs returns the EndTs field value if set, zero value otherwise.
func (o *MarketHistoryCandleStickInfo) GetEndTs() int64 {
	if o == nil || o.EndTs == nil {
		var ret int64
		return ret
	}
	return *o.EndTs
}

// GetEndTsOk returns a tuple with the EndTs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketHistoryCandleStickInfo) GetEndTsOk() (*int64, bool) {
	if o == nil || o.EndTs == nil {
		return nil, false
	}
	return o.EndTs, true
}

// HasEndTs returns a boolean if a field has been set.
func (o *MarketHistoryCandleStickInfo) HasEndTs() bool {
	if o != nil && o.EndTs != nil {
		return true
	}

	return false
}

// SetEndTs gets a reference to the given int64 and assigns it to the EndTs field.
func (o *MarketHistoryCandleStickInfo) SetEndTs(v int64) {
	o.EndTs = &v
}

// GetOpenInterest returns the OpenInterest field value if set, zero value otherwise.
func (o *MarketHistoryCandleStickInfo) GetOpenInterest() int64 {
	if o == nil || o.OpenInterest == nil {
		var ret int64
		return ret
	}
	return *o.OpenInterest
}

// GetOpenInterestOk returns a tuple with the OpenInterest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketHistoryCandleStickInfo) GetOpenInterestOk() (*int64, bool) {
	if o == nil || o.OpenInterest == nil {
		return nil, false
	}
	return o.OpenInterest, true
}

// HasOpenInterest returns a boolean if a field has been set.
func (o *MarketHistoryCandleStickInfo) HasOpenInterest() bool {
	if o != nil && o.OpenInterest != nil {
		return true
	}

	return false
}

// SetOpenInterest gets a reference to the given int64 and assigns it to the OpenInterest field.
func (o *MarketHistoryCandleStickInfo) SetOpenInterest(v int64) {
	o.OpenInterest = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *MarketHistoryCandleStickInfo) GetPrice() OLHCM {
	if o == nil || o.Price == nil {
		var ret OLHCM
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketHistoryCandleStickInfo) GetPriceOk() (*OLHCM, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *MarketHistoryCandleStickInfo) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given OLHCM and assigns it to the Price field.
func (o *MarketHistoryCandleStickInfo) SetPrice(v OLHCM) {
	o.Price = &v
}

// GetStartTs returns the StartTs field value if set, zero value otherwise.
func (o *MarketHistoryCandleStickInfo) GetStartTs() int64 {
	if o == nil || o.StartTs == nil {
		var ret int64
		return ret
	}
	return *o.StartTs
}

// GetStartTsOk returns a tuple with the StartTs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketHistoryCandleStickInfo) GetStartTsOk() (*int64, bool) {
	if o == nil || o.StartTs == nil {
		return nil, false
	}
	return o.StartTs, true
}

// HasStartTs returns a boolean if a field has been set.
func (o *MarketHistoryCandleStickInfo) HasStartTs() bool {
	if o != nil && o.StartTs != nil {
		return true
	}

	return false
}

// SetStartTs gets a reference to the given int64 and assigns it to the StartTs field.
func (o *MarketHistoryCandleStickInfo) SetStartTs(v int64) {
	o.StartTs = &v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *MarketHistoryCandleStickInfo) GetVolume() int64 {
	if o == nil || o.Volume == nil {
		var ret int64
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketHistoryCandleStickInfo) GetVolumeOk() (*int64, bool) {
	if o == nil || o.Volume == nil {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *MarketHistoryCandleStickInfo) HasVolume() bool {
	if o != nil && o.Volume != nil {
		return true
	}

	return false
}

// SetVolume gets a reference to the given int64 and assigns it to the Volume field.
func (o *MarketHistoryCandleStickInfo) SetVolume(v int64) {
	o.Volume = &v
}

// GetYesAsk returns the YesAsk field value if set, zero value otherwise.
func (o *MarketHistoryCandleStickInfo) GetYesAsk() OLHCM {
	if o == nil || o.YesAsk == nil {
		var ret OLHCM
		return ret
	}
	return *o.YesAsk
}

// GetYesAskOk returns a tuple with the YesAsk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketHistoryCandleStickInfo) GetYesAskOk() (*OLHCM, bool) {
	if o == nil || o.YesAsk == nil {
		return nil, false
	}
	return o.YesAsk, true
}

// HasYesAsk returns a boolean if a field has been set.
func (o *MarketHistoryCandleStickInfo) HasYesAsk() bool {
	if o != nil && o.YesAsk != nil {
		return true
	}

	return false
}

// SetYesAsk gets a reference to the given OLHCM and assigns it to the YesAsk field.
func (o *MarketHistoryCandleStickInfo) SetYesAsk(v OLHCM) {
	o.YesAsk = &v
}

// GetYesBid returns the YesBid field value if set, zero value otherwise.
func (o *MarketHistoryCandleStickInfo) GetYesBid() OLHCM {
	if o == nil || o.YesBid == nil {
		var ret OLHCM
		return ret
	}
	return *o.YesBid
}

// GetYesBidOk returns a tuple with the YesBid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketHistoryCandleStickInfo) GetYesBidOk() (*OLHCM, bool) {
	if o == nil || o.YesBid == nil {
		return nil, false
	}
	return o.YesBid, true
}

// HasYesBid returns a boolean if a field has been set.
func (o *MarketHistoryCandleStickInfo) HasYesBid() bool {
	if o != nil && o.YesBid != nil {
		return true
	}

	return false
}

// SetYesBid gets a reference to the given OLHCM and assigns it to the YesBid field.
func (o *MarketHistoryCandleStickInfo) SetYesBid(v OLHCM) {
	o.YesBid = &v
}

func (o MarketHistoryCandleStickInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EndTs != nil {
		toSerialize["EndTs"] = o.EndTs
	}
	if o.OpenInterest != nil {
		toSerialize["OpenInterest"] = o.OpenInterest
	}
	if o.Price != nil {
		toSerialize["Price"] = o.Price
	}
	if o.StartTs != nil {
		toSerialize["StartTs"] = o.StartTs
	}
	if o.Volume != nil {
		toSerialize["Volume"] = o.Volume
	}
	if o.YesAsk != nil {
		toSerialize["YesAsk"] = o.YesAsk
	}
	if o.YesBid != nil {
		toSerialize["YesBid"] = o.YesBid
	}
	return json.Marshal(toSerialize)
}

type NullableMarketHistoryCandleStickInfo struct {
	value *MarketHistoryCandleStickInfo
	isSet bool
}

func (v NullableMarketHistoryCandleStickInfo) Get() *MarketHistoryCandleStickInfo {
	return v.value
}

func (v *NullableMarketHistoryCandleStickInfo) Set(val *MarketHistoryCandleStickInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMarketHistoryCandleStickInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMarketHistoryCandleStickInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarketHistoryCandleStickInfo(val *MarketHistoryCandleStickInfo) *NullableMarketHistoryCandleStickInfo {
	return &NullableMarketHistoryCandleStickInfo{value: val, isSet: true}
}

func (v NullableMarketHistoryCandleStickInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarketHistoryCandleStickInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Kalshi API.

This documentation describes Kalshi's REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kalshiAPI

import (
	"encoding/json"
	"time"
)

// Notification struct for Notification
type Notification struct {
	Content map[string]map[string]interface{} `json:"content,omitempty"`
	CreatedTs *time.Time `json:"created_ts,omitempty"`
	Id *string `json:"id,omitempty"`
	IsDelivered *bool `json:"is_delivered,omitempty"`
	IsRead *bool `json:"is_read,omitempty"`
	Link *string `json:"link,omitempty"`
	Type *string `json:"type,omitempty"`
	UserId *string `json:"user_id,omitempty"`
}

// NewNotification instantiates a new Notification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotification() *Notification {
	this := Notification{}
	return &this
}

// NewNotificationWithDefaults instantiates a new Notification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationWithDefaults() *Notification {
	this := Notification{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *Notification) GetContent() map[string]map[string]interface{} {
	if o == nil || o.Content == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetContentOk() (map[string]map[string]interface{}, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *Notification) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given map[string]map[string]interface{} and assigns it to the Content field.
func (o *Notification) SetContent(v map[string]map[string]interface{}) {
	o.Content = v
}

// GetCreatedTs returns the CreatedTs field value if set, zero value otherwise.
func (o *Notification) GetCreatedTs() time.Time {
	if o == nil || o.CreatedTs == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedTs
}

// GetCreatedTsOk returns a tuple with the CreatedTs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetCreatedTsOk() (*time.Time, bool) {
	if o == nil || o.CreatedTs == nil {
		return nil, false
	}
	return o.CreatedTs, true
}

// HasCreatedTs returns a boolean if a field has been set.
func (o *Notification) HasCreatedTs() bool {
	if o != nil && o.CreatedTs != nil {
		return true
	}

	return false
}

// SetCreatedTs gets a reference to the given time.Time and assigns it to the CreatedTs field.
func (o *Notification) SetCreatedTs(v time.Time) {
	o.CreatedTs = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Notification) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Notification) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Notification) SetId(v string) {
	o.Id = &v
}

// GetIsDelivered returns the IsDelivered field value if set, zero value otherwise.
func (o *Notification) GetIsDelivered() bool {
	if o == nil || o.IsDelivered == nil {
		var ret bool
		return ret
	}
	return *o.IsDelivered
}

// GetIsDeliveredOk returns a tuple with the IsDelivered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIsDeliveredOk() (*bool, bool) {
	if o == nil || o.IsDelivered == nil {
		return nil, false
	}
	return o.IsDelivered, true
}

// HasIsDelivered returns a boolean if a field has been set.
func (o *Notification) HasIsDelivered() bool {
	if o != nil && o.IsDelivered != nil {
		return true
	}

	return false
}

// SetIsDelivered gets a reference to the given bool and assigns it to the IsDelivered field.
func (o *Notification) SetIsDelivered(v bool) {
	o.IsDelivered = &v
}

// GetIsRead returns the IsRead field value if set, zero value otherwise.
func (o *Notification) GetIsRead() bool {
	if o == nil || o.IsRead == nil {
		var ret bool
		return ret
	}
	return *o.IsRead
}

// GetIsReadOk returns a tuple with the IsRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetIsReadOk() (*bool, bool) {
	if o == nil || o.IsRead == nil {
		return nil, false
	}
	return o.IsRead, true
}

// HasIsRead returns a boolean if a field has been set.
func (o *Notification) HasIsRead() bool {
	if o != nil && o.IsRead != nil {
		return true
	}

	return false
}

// SetIsRead gets a reference to the given bool and assigns it to the IsRead field.
func (o *Notification) SetIsRead(v bool) {
	o.IsRead = &v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *Notification) GetLink() string {
	if o == nil || o.Link == nil {
		var ret string
		return ret
	}
	return *o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetLinkOk() (*string, bool) {
	if o == nil || o.Link == nil {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *Notification) HasLink() bool {
	if o != nil && o.Link != nil {
		return true
	}

	return false
}

// SetLink gets a reference to the given string and assigns it to the Link field.
func (o *Notification) SetLink(v string) {
	o.Link = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Notification) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Notification) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Notification) SetType(v string) {
	o.Type = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *Notification) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *Notification) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *Notification) SetUserId(v string) {
	o.UserId = &v
}

func (o Notification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	if o.CreatedTs != nil {
		toSerialize["created_ts"] = o.CreatedTs
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IsDelivered != nil {
		toSerialize["is_delivered"] = o.IsDelivered
	}
	if o.IsRead != nil {
		toSerialize["is_read"] = o.IsRead
	}
	if o.Link != nil {
		toSerialize["link"] = o.Link
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.UserId != nil {
		toSerialize["user_id"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullableNotification struct {
	value *Notification
	isSet bool
}

func (v NullableNotification) Get() *Notification {
	return v.value
}

func (v *NullableNotification) Set(val *Notification) {
	v.value = val
	v.isSet = true
}

func (v NullableNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotification(val *Notification) *NullableNotification {
	return &NullableNotification{value: val, isSet: true}
}

func (v NullableNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Kalshi API.

This documentation describes Kalshi's REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kalshiAPI

import (
	"encoding/json"
	"time"
)

// User Represents a user's profile on the api.
type User struct {
	AreaCode *string `json:"area_code,omitempty"`
	BirthDate *string `json:"birth_date,omitempty"`
	City *string `json:"city,omitempty"`
	Country *string `json:"country,omitempty"`
	CountryCode *string `json:"country_code,omitempty"`
	CreatedTs *time.Time `json:"created_ts,omitempty"`
	Email *string `json:"email,omitempty"`
	FinishedFre *bool `json:"finished_fre,omitempty"`
	FirstName *string `json:"first_name,omitempty"`
	LastName *string `json:"last_name,omitempty"`
	PhoneNumber *string `json:"phone_number,omitempty"`
	PostalCode *string `json:"postal_code,omitempty"`
	State *string `json:"state,omitempty"`
	Street1 *string `json:"street1,omitempty"`
	Street2 *string `json:"street2,omitempty"`
	UseBidAsk *bool `json:"use_bid_ask,omitempty"`
	UserId *string `json:"user_id,omitempty"`
	Watchlist []string `json:"watchlist,omitempty"`
	WireCode *string `json:"wire_code,omitempty"`
}

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser() *User {
	this := User{}
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetAreaCode returns the AreaCode field value if set, zero value otherwise.
func (o *User) GetAreaCode() string {
	if o == nil || o.AreaCode == nil {
		var ret string
		return ret
	}
	return *o.AreaCode
}

// GetAreaCodeOk returns a tuple with the AreaCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetAreaCodeOk() (*string, bool) {
	if o == nil || o.AreaCode == nil {
		return nil, false
	}
	return o.AreaCode, true
}

// HasAreaCode returns a boolean if a field has been set.
func (o *User) HasAreaCode() bool {
	if o != nil && o.AreaCode != nil {
		return true
	}

	return false
}

// SetAreaCode gets a reference to the given string and assigns it to the AreaCode field.
func (o *User) SetAreaCode(v string) {
	o.AreaCode = &v
}

// GetBirthDate returns the BirthDate field value if set, zero value otherwise.
func (o *User) GetBirthDate() string {
	if o == nil || o.BirthDate == nil {
		var ret string
		return ret
	}
	return *o.BirthDate
}

// GetBirthDateOk returns a tuple with the BirthDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetBirthDateOk() (*string, bool) {
	if o == nil || o.BirthDate == nil {
		return nil, false
	}
	return o.BirthDate, true
}

// HasBirthDate returns a boolean if a field has been set.
func (o *User) HasBirthDate() bool {
	if o != nil && o.BirthDate != nil {
		return true
	}

	return false
}

// SetBirthDate gets a reference to the given string and assigns it to the BirthDate field.
func (o *User) SetBirthDate(v string) {
	o.BirthDate = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *User) GetCity() string {
	if o == nil || o.City == nil {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetCityOk() (*string, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *User) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *User) SetCity(v string) {
	o.City = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *User) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *User) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *User) SetCountry(v string) {
	o.Country = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *User) GetCountryCode() string {
	if o == nil || o.CountryCode == nil {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetCountryCodeOk() (*string, bool) {
	if o == nil || o.CountryCode == nil {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *User) HasCountryCode() bool {
	if o != nil && o.CountryCode != nil {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *User) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetCreatedTs returns the CreatedTs field value if set, zero value otherwise.
func (o *User) GetCreatedTs() time.Time {
	if o == nil || o.CreatedTs == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedTs
}

// GetCreatedTsOk returns a tuple with the CreatedTs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetCreatedTsOk() (*time.Time, bool) {
	if o == nil || o.CreatedTs == nil {
		return nil, false
	}
	return o.CreatedTs, true
}

// HasCreatedTs returns a boolean if a field has been set.
func (o *User) HasCreatedTs() bool {
	if o != nil && o.CreatedTs != nil {
		return true
	}

	return false
}

// SetCreatedTs gets a reference to the given time.Time and assigns it to the CreatedTs field.
func (o *User) SetCreatedTs(v time.Time) {
	o.CreatedTs = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *User) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *User) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *User) SetEmail(v string) {
	o.Email = &v
}

// GetFinishedFre returns the FinishedFre field value if set, zero value otherwise.
func (o *User) GetFinishedFre() bool {
	if o == nil || o.FinishedFre == nil {
		var ret bool
		return ret
	}
	return *o.FinishedFre
}

// GetFinishedFreOk returns a tuple with the FinishedFre field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetFinishedFreOk() (*bool, bool) {
	if o == nil || o.FinishedFre == nil {
		return nil, false
	}
	return o.FinishedFre, true
}

// HasFinishedFre returns a boolean if a field has been set.
func (o *User) HasFinishedFre() bool {
	if o != nil && o.FinishedFre != nil {
		return true
	}

	return false
}

// SetFinishedFre gets a reference to the given bool and assigns it to the FinishedFre field.
func (o *User) SetFinishedFre(v bool) {
	o.FinishedFre = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *User) GetFirstName() string {
	if o == nil || o.FirstName == nil {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetFirstNameOk() (*string, bool) {
	if o == nil || o.FirstName == nil {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *User) HasFirstName() bool {
	if o != nil && o.FirstName != nil {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *User) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *User) GetLastName() string {
	if o == nil || o.LastName == nil {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLastNameOk() (*string, bool) {
	if o == nil || o.LastName == nil {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *User) HasLastName() bool {
	if o != nil && o.LastName != nil {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *User) SetLastName(v string) {
	o.LastName = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *User) GetPhoneNumber() string {
	if o == nil || o.PhoneNumber == nil {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPhoneNumberOk() (*string, bool) {
	if o == nil || o.PhoneNumber == nil {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *User) HasPhoneNumber() bool {
	if o != nil && o.PhoneNumber != nil {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *User) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise.
func (o *User) GetPostalCode() string {
	if o == nil || o.PostalCode == nil {
		var ret string
		return ret
	}
	return *o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPostalCodeOk() (*string, bool) {
	if o == nil || o.PostalCode == nil {
		return nil, false
	}
	return o.PostalCode, true
}

// HasPostalCode returns a boolean if a field has been set.
func (o *User) HasPostalCode() bool {
	if o != nil && o.PostalCode != nil {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given string and assigns it to the PostalCode field.
func (o *User) SetPostalCode(v string) {
	o.PostalCode = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *User) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *User) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *User) SetState(v string) {
	o.State = &v
}

// GetStreet1 returns the Street1 field value if set, zero value otherwise.
func (o *User) GetStreet1() string {
	if o == nil || o.Street1 == nil {
		var ret string
		return ret
	}
	return *o.Street1
}

// GetStreet1Ok returns a tuple with the Street1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetStreet1Ok() (*string, bool) {
	if o == nil || o.Street1 == nil {
		return nil, false
	}
	return o.Street1, true
}

// HasStreet1 returns a boolean if a field has been set.
func (o *User) HasStreet1() bool {
	if o != nil && o.Street1 != nil {
		return true
	}

	return false
}

// SetStreet1 gets a reference to the given string and assigns it to the Street1 field.
func (o *User) SetStreet1(v string) {
	o.Street1 = &v
}

// GetStreet2 returns the Street2 field value if set, zero value otherwise.
func (o *User) GetStreet2() string {
	if o == nil || o.Street2 == nil {
		var ret string
		return ret
	}
	return *o.Street2
}

// GetStreet2Ok returns a tuple with the Street2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetStreet2Ok() (*string, bool) {
	if o == nil || o.Street2 == nil {
		return nil, false
	}
	return o.Street2, true
}

// HasStreet2 returns a boolean if a field has been set.
func (o *User) HasStreet2() bool {
	if o != nil && o.Street2 != nil {
		return true
	}

	return false
}

// SetStreet2 gets a reference to the given string and assigns it to the Street2 field.
func (o *User) SetStreet2(v string) {
	o.Street2 = &v
}

// GetUseBidAsk returns the UseBidAsk field value if set, zero value otherwise.
func (o *User) GetUseBidAsk() bool {
	if o == nil || o.UseBidAsk == nil {
		var ret bool
		return ret
	}
	return *o.UseBidAsk
}

// GetUseBidAskOk returns a tuple with the UseBidAsk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetUseBidAskOk() (*bool, bool) {
	if o == nil || o.UseBidAsk == nil {
		return nil, false
	}
	return o.UseBidAsk, true
}

// HasUseBidAsk returns a boolean if a field has been set.
func (o *User) HasUseBidAsk() bool {
	if o != nil && o.UseBidAsk != nil {
		return true
	}

	return false
}

// SetUseBidAsk gets a reference to the given bool and assigns it to the UseBidAsk field.
func (o *User) SetUseBidAsk(v bool) {
	o.UseBidAsk = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *User) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *User) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *User) SetUserId(v string) {
	o.UserId = &v
}

// GetWatchlist returns the Watchlist field value if set, zero value otherwise.
func (o *User) GetWatchlist() []string {
	if o == nil || o.Watchlist == nil {
		var ret []string
		return ret
	}
	return o.Watchlist
}

// GetWatchlistOk returns a tuple with the Watchlist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetWatchlistOk() ([]string, bool) {
	if o == nil || o.Watchlist == nil {
		return nil, false
	}
	return o.Watchlist, true
}

// HasWatchlist returns a boolean if a field has been set.
func (o *User) HasWatchlist() bool {
	if o != nil && o.Watchlist != nil {
		return true
	}

	return false
}

// SetWatchlist gets a reference to the given []string and assigns it to the Watchlist field.
func (o *User) SetWatchlist(v []string) {
	o.Watchlist = v
}

// GetWireCode returns the WireCode field value if set, zero value otherwise.
func (o *User) GetWireCode() string {
	if o == nil || o.WireCode == nil {
		var ret string
		return ret
	}
	return *o.WireCode
}

// GetWireCodeOk returns a tuple with the WireCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetWireCodeOk() (*string, bool) {
	if o == nil || o.WireCode == nil {
		return nil, false
	}
	return o.WireCode, true
}

// HasWireCode returns a boolean if a field has been set.
func (o *User) HasWireCode() bool {
	if o != nil && o.WireCode != nil {
		return true
	}

	return false
}

// SetWireCode gets a reference to the given string and assigns it to the WireCode field.
func (o *User) SetWireCode(v string) {
	o.WireCode = &v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AreaCode != nil {
		toSerialize["area_code"] = o.AreaCode
	}
	if o.BirthDate != nil {
		toSerialize["birth_date"] = o.BirthDate
	}
	if o.City != nil {
		toSerialize["city"] = o.City
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.CountryCode != nil {
		toSerialize["country_code"] = o.CountryCode
	}
	if o.CreatedTs != nil {
		toSerialize["created_ts"] = o.CreatedTs
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.FinishedFre != nil {
		toSerialize["finished_fre"] = o.FinishedFre
	}
	if o.FirstName != nil {
		toSerialize["first_name"] = o.FirstName
	}
	if o.LastName != nil {
		toSerialize["last_name"] = o.LastName
	}
	if o.PhoneNumber != nil {
		toSerialize["phone_number"] = o.PhoneNumber
	}
	if o.PostalCode != nil {
		toSerialize["postal_code"] = o.PostalCode
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Street1 != nil {
		toSerialize["street1"] = o.Street1
	}
	if o.Street2 != nil {
		toSerialize["street2"] = o.Street2
	}
	if o.UseBidAsk != nil {
		toSerialize["use_bid_ask"] = o.UseBidAsk
	}
	if o.UserId != nil {
		toSerialize["user_id"] = o.UserId
	}
	if o.Watchlist != nil {
		toSerialize["watchlist"] = o.Watchlist
	}
	if o.WireCode != nil {
		toSerialize["wire_code"] = o.WireCode
	}
	return json.Marshal(toSerialize)
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Kalshi API.

This documentation describes Kalshi's REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kalshiAPI

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


type RangedMarketsApi interface {

	/*
	GetRangedMarketByTicker GetRangedMarketByTicker

	End-point for getting data about a ranged market by its ticker

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ticker Should be the ticker of the ranged market
	@return ApiGetRangedMarketByTickerRequest
	*/
	GetRangedMarketByTicker(ctx context.Context, ticker string) ApiGetRangedMarketByTickerRequest

	// GetRangedMarketByTickerExecute executes the request
	//  @return GetRangedMarketByTickerResponse
	GetRangedMarketByTickerExecute(r ApiGetRangedMarketByTickerRequest) (*GetRangedMarketByTickerResponse, *http.Response, error)

	/*
	UserGetRangedMarketPosition UserGetRangedMarketPosition

	End-point for getting the market positions and additional data for the logged in user for all markets whose results linked by a single outcome.
These markets share a parameter ranged_market_id, which indicates their relationship with each other.

The value for the user_id path parameter should match the user_id value returned on the response for the last login request (POST /log_in).

The value for the ranged_market_id path parameter should match the id value of the target market.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId Should be filled in with your user_id provided on log_in
	@param rangedMarketId Should be filled with the id of the target ranged market
	@return ApiUserGetRangedMarketPositionRequest
	*/
	UserGetRangedMarketPosition(ctx context.Context, userId string, rangedMarketId string) ApiUserGetRangedMarketPositionRequest

	// UserGetRangedMarketPositionExecute executes the request
	//  @return UserGetRangedMarketPositionResponse
	UserGetRangedMarketPositionExecute(r ApiUserGetRangedMarketPositionRequest) (*UserGetRangedMarketPositionResponse, *http.Response, error)
}

// RangedMarketsApiService RangedMarketsApi service
type RangedMarketsApiService service

type ApiGetRangedMarketByTickerRequest struct {
	ctx context.Context
	ApiService RangedMarketsApi
	ticker string
}

func (r ApiGetRangedMarketByTickerRequest) Execute() (*GetRangedMarketByTickerResponse, *http.Response, error) {
	return r.ApiService.GetRangedMarketByTickerExecute(r)
}

/*
GetRangedMarketByTicker GetRangedMarketByTicker

End-point for getting data about a ranged market by its ticker

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ticker Should be the ticker of the ranged market
 @return ApiGetRangedMarketByTickerRequest
*/
func (a *RangedMarketsApiService) GetRangedMarketByTicker(ctx context.Context, ticker string) ApiGetRangedMarketByTickerRequest {
	return ApiGetRangedMarketByTickerRequest{
		ApiService: a,
		ctx: ctx,
		ticker: ticker,
	}
}

// Execute executes the request
//  @return GetRangedMarketByTickerResponse
func (a *RangedMarketsApiService) GetRangedMarketByTickerExecute(r ApiGetRangedMarketByTickerRequest) (*GetRangedMarketByTickerResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRangedMarketByTickerResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RangedMarketsApiService.GetRangedMarketByTicker")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ranged_markets_by_ticker/{ticker}"
	localVarPath = strings.Replace(localVarPath, "{"+"ticker"+"}", url.PathEscape(parameterToString(r.ticker, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUserGetRangedMarketPositionRequest struct {
	ctx context.Context
	ApiService RangedMarketsApi
	userId string
	rangedMarketId string
}

func (r ApiUserGetRangedMarketPositionRequest) Execute() (*UserGetRangedMarketPositionResponse, *http.Response, error) {
	return r.ApiService.UserGetRangedMarketPositionExecute(r)
}

/*
UserGetRangedMarketPosition UserGetRangedMarketPosition

End-point for getting the market positions and additional data for the logged in user for all markets whose results linked by a single outcome.
These markets share a parameter ranged_market_id, which indicates their relationship with each other.

The value for the user_id path parameter should match the user_id value returned on the response for the last login request (POST /log_in).

The value for the ranged_market_id path parameter should match the id value of the target market.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId Should be filled in with your user_id provided on log_in
 @param rangedMarketId Should be filled with the id of the target ranged market
 @return ApiUserGetRangedMarketPositionRequest
*/
func (a *RangedMarketsApiService) UserGetRangedMarketPosition(ctx context.Context, userId string, rangedMarketId string) ApiUserGetRangedMarketPositionRequest {
	return ApiUserGetRangedMarketPositionRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		rangedMarketId: rangedMarketId,
	}
}

// Execute executes the request
//  @return UserGetRangedMarketPositionResponse
func (a *RangedMarketsApiService) UserGetRangedMarketPositionExecute(r ApiUserGetRangedMarketPositionRequest) (*UserGetRangedMarketPositionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserGetRangedMarketPositionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RangedMarketsApiService.UserGetRangedMarketPosition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_id}/ranged_positions/{ranged_market_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ranged_market_id"+"}", url.PathEscape(parameterToString(r.rangedMarketId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["cookie"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

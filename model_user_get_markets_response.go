/*
Kalshi API.

This documentation describes Kalshi's REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kalshiAPI

import (
	"encoding/json"
)

// UserGetMarketsResponse struct for UserGetMarketsResponse
type UserGetMarketsResponse struct {
	Markets []Market `json:"markets"`
}

// NewUserGetMarketsResponse instantiates a new UserGetMarketsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserGetMarketsResponse(markets []Market) *UserGetMarketsResponse {
	this := UserGetMarketsResponse{}
	this.Markets = markets
	return &this
}

// NewUserGetMarketsResponseWithDefaults instantiates a new UserGetMarketsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserGetMarketsResponseWithDefaults() *UserGetMarketsResponse {
	this := UserGetMarketsResponse{}
	return &this
}

// GetMarkets returns the Markets field value
func (o *UserGetMarketsResponse) GetMarkets() []Market {
	if o == nil {
		var ret []Market
		return ret
	}

	return o.Markets
}

// GetMarketsOk returns a tuple with the Markets field value
// and a boolean to check if the value has been set.
func (o *UserGetMarketsResponse) GetMarketsOk() ([]Market, bool) {
	if o == nil {
		return nil, false
	}
	return o.Markets, true
}

// SetMarkets sets field value
func (o *UserGetMarketsResponse) SetMarkets(v []Market) {
	o.Markets = v
}

func (o UserGetMarketsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["markets"] = o.Markets
	}
	return json.Marshal(toSerialize)
}

type NullableUserGetMarketsResponse struct {
	value *UserGetMarketsResponse
	isSet bool
}

func (v NullableUserGetMarketsResponse) Get() *UserGetMarketsResponse {
	return v.value
}

func (v *NullableUserGetMarketsResponse) Set(val *UserGetMarketsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserGetMarketsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserGetMarketsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserGetMarketsResponse(val *UserGetMarketsResponse) *NullableUserGetMarketsResponse {
	return &NullableUserGetMarketsResponse{value: val, isSet: true}
}

func (v NullableUserGetMarketsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserGetMarketsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



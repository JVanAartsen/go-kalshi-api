/*
Kalshi API.

This documentation describes Kalshi's REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kalshiAPI

import (
	"encoding/json"
)

// ChangeSubscriptionResponse struct for ChangeSubscriptionResponse
type ChangeSubscriptionResponse struct {
	Preferences SubscriptionPreference `json:"preferences"`
}

// NewChangeSubscriptionResponse instantiates a new ChangeSubscriptionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeSubscriptionResponse(preferences SubscriptionPreference) *ChangeSubscriptionResponse {
	this := ChangeSubscriptionResponse{}
	this.Preferences = preferences
	return &this
}

// NewChangeSubscriptionResponseWithDefaults instantiates a new ChangeSubscriptionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeSubscriptionResponseWithDefaults() *ChangeSubscriptionResponse {
	this := ChangeSubscriptionResponse{}
	return &this
}

// GetPreferences returns the Preferences field value
func (o *ChangeSubscriptionResponse) GetPreferences() SubscriptionPreference {
	if o == nil {
		var ret SubscriptionPreference
		return ret
	}

	return o.Preferences
}

// GetPreferencesOk returns a tuple with the Preferences field value
// and a boolean to check if the value has been set.
func (o *ChangeSubscriptionResponse) GetPreferencesOk() (*SubscriptionPreference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Preferences, true
}

// SetPreferences sets field value
func (o *ChangeSubscriptionResponse) SetPreferences(v SubscriptionPreference) {
	o.Preferences = v
}

func (o ChangeSubscriptionResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["preferences"] = o.Preferences
	}
	return json.Marshal(toSerialize)
}

type NullableChangeSubscriptionResponse struct {
	value *ChangeSubscriptionResponse
	isSet bool
}

func (v NullableChangeSubscriptionResponse) Get() *ChangeSubscriptionResponse {
	return v.value
}

func (v *NullableChangeSubscriptionResponse) Set(val *ChangeSubscriptionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeSubscriptionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeSubscriptionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeSubscriptionResponse(val *ChangeSubscriptionResponse) *NullableChangeSubscriptionResponse {
	return &NullableChangeSubscriptionResponse{value: val, isSet: true}
}

func (v NullableChangeSubscriptionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeSubscriptionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Kalshi API.

This documentation describes Kalshi's REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kalshiAPI

import (
	"encoding/json"
)

// UserGetReferralInfoResponse struct for UserGetReferralInfoResponse
type UserGetReferralInfoResponse struct {
	EligibleToRefer *bool `json:"eligible_to_refer,omitempty"`
	NumContractsTraded *int64 `json:"num_contracts_traded,omitempty"`
	PeopleReferred []PeopleReferred `json:"people_referred,omitempty"`
	ReferralCode *string `json:"referral_code,omitempty"`
	ReferralId *string `json:"referral_id,omitempty"`
	ReferralMoneyRewarded *int64 `json:"referral_money_rewarded,omitempty"`
	StageInFunnel *string `json:"stage_in_funnel,omitempty"`
}

// NewUserGetReferralInfoResponse instantiates a new UserGetReferralInfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserGetReferralInfoResponse() *UserGetReferralInfoResponse {
	this := UserGetReferralInfoResponse{}
	return &this
}

// NewUserGetReferralInfoResponseWithDefaults instantiates a new UserGetReferralInfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserGetReferralInfoResponseWithDefaults() *UserGetReferralInfoResponse {
	this := UserGetReferralInfoResponse{}
	return &this
}

// GetEligibleToRefer returns the EligibleToRefer field value if set, zero value otherwise.
func (o *UserGetReferralInfoResponse) GetEligibleToRefer() bool {
	if o == nil || o.EligibleToRefer == nil {
		var ret bool
		return ret
	}
	return *o.EligibleToRefer
}

// GetEligibleToReferOk returns a tuple with the EligibleToRefer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGetReferralInfoResponse) GetEligibleToReferOk() (*bool, bool) {
	if o == nil || o.EligibleToRefer == nil {
		return nil, false
	}
	return o.EligibleToRefer, true
}

// HasEligibleToRefer returns a boolean if a field has been set.
func (o *UserGetReferralInfoResponse) HasEligibleToRefer() bool {
	if o != nil && o.EligibleToRefer != nil {
		return true
	}

	return false
}

// SetEligibleToRefer gets a reference to the given bool and assigns it to the EligibleToRefer field.
func (o *UserGetReferralInfoResponse) SetEligibleToRefer(v bool) {
	o.EligibleToRefer = &v
}

// GetNumContractsTraded returns the NumContractsTraded field value if set, zero value otherwise.
func (o *UserGetReferralInfoResponse) GetNumContractsTraded() int64 {
	if o == nil || o.NumContractsTraded == nil {
		var ret int64
		return ret
	}
	return *o.NumContractsTraded
}

// GetNumContractsTradedOk returns a tuple with the NumContractsTraded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGetReferralInfoResponse) GetNumContractsTradedOk() (*int64, bool) {
	if o == nil || o.NumContractsTraded == nil {
		return nil, false
	}
	return o.NumContractsTraded, true
}

// HasNumContractsTraded returns a boolean if a field has been set.
func (o *UserGetReferralInfoResponse) HasNumContractsTraded() bool {
	if o != nil && o.NumContractsTraded != nil {
		return true
	}

	return false
}

// SetNumContractsTraded gets a reference to the given int64 and assigns it to the NumContractsTraded field.
func (o *UserGetReferralInfoResponse) SetNumContractsTraded(v int64) {
	o.NumContractsTraded = &v
}

// GetPeopleReferred returns the PeopleReferred field value if set, zero value otherwise.
func (o *UserGetReferralInfoResponse) GetPeopleReferred() []PeopleReferred {
	if o == nil || o.PeopleReferred == nil {
		var ret []PeopleReferred
		return ret
	}
	return o.PeopleReferred
}

// GetPeopleReferredOk returns a tuple with the PeopleReferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGetReferralInfoResponse) GetPeopleReferredOk() ([]PeopleReferred, bool) {
	if o == nil || o.PeopleReferred == nil {
		return nil, false
	}
	return o.PeopleReferred, true
}

// HasPeopleReferred returns a boolean if a field has been set.
func (o *UserGetReferralInfoResponse) HasPeopleReferred() bool {
	if o != nil && o.PeopleReferred != nil {
		return true
	}

	return false
}

// SetPeopleReferred gets a reference to the given []PeopleReferred and assigns it to the PeopleReferred field.
func (o *UserGetReferralInfoResponse) SetPeopleReferred(v []PeopleReferred) {
	o.PeopleReferred = v
}

// GetReferralCode returns the ReferralCode field value if set, zero value otherwise.
func (o *UserGetReferralInfoResponse) GetReferralCode() string {
	if o == nil || o.ReferralCode == nil {
		var ret string
		return ret
	}
	return *o.ReferralCode
}

// GetReferralCodeOk returns a tuple with the ReferralCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGetReferralInfoResponse) GetReferralCodeOk() (*string, bool) {
	if o == nil || o.ReferralCode == nil {
		return nil, false
	}
	return o.ReferralCode, true
}

// HasReferralCode returns a boolean if a field has been set.
func (o *UserGetReferralInfoResponse) HasReferralCode() bool {
	if o != nil && o.ReferralCode != nil {
		return true
	}

	return false
}

// SetReferralCode gets a reference to the given string and assigns it to the ReferralCode field.
func (o *UserGetReferralInfoResponse) SetReferralCode(v string) {
	o.ReferralCode = &v
}

// GetReferralId returns the ReferralId field value if set, zero value otherwise.
func (o *UserGetReferralInfoResponse) GetReferralId() string {
	if o == nil || o.ReferralId == nil {
		var ret string
		return ret
	}
	return *o.ReferralId
}

// GetReferralIdOk returns a tuple with the ReferralId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGetReferralInfoResponse) GetReferralIdOk() (*string, bool) {
	if o == nil || o.ReferralId == nil {
		return nil, false
	}
	return o.ReferralId, true
}

// HasReferralId returns a boolean if a field has been set.
func (o *UserGetReferralInfoResponse) HasReferralId() bool {
	if o != nil && o.ReferralId != nil {
		return true
	}

	return false
}

// SetReferralId gets a reference to the given string and assigns it to the ReferralId field.
func (o *UserGetReferralInfoResponse) SetReferralId(v string) {
	o.ReferralId = &v
}

// GetReferralMoneyRewarded returns the ReferralMoneyRewarded field value if set, zero value otherwise.
func (o *UserGetReferralInfoResponse) GetReferralMoneyRewarded() int64 {
	if o == nil || o.ReferralMoneyRewarded == nil {
		var ret int64
		return ret
	}
	return *o.ReferralMoneyRewarded
}

// GetReferralMoneyRewardedOk returns a tuple with the ReferralMoneyRewarded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGetReferralInfoResponse) GetReferralMoneyRewardedOk() (*int64, bool) {
	if o == nil || o.ReferralMoneyRewarded == nil {
		return nil, false
	}
	return o.ReferralMoneyRewarded, true
}

// HasReferralMoneyRewarded returns a boolean if a field has been set.
func (o *UserGetReferralInfoResponse) HasReferralMoneyRewarded() bool {
	if o != nil && o.ReferralMoneyRewarded != nil {
		return true
	}

	return false
}

// SetReferralMoneyRewarded gets a reference to the given int64 and assigns it to the ReferralMoneyRewarded field.
func (o *UserGetReferralInfoResponse) SetReferralMoneyRewarded(v int64) {
	o.ReferralMoneyRewarded = &v
}

// GetStageInFunnel returns the StageInFunnel field value if set, zero value otherwise.
func (o *UserGetReferralInfoResponse) GetStageInFunnel() string {
	if o == nil || o.StageInFunnel == nil {
		var ret string
		return ret
	}
	return *o.StageInFunnel
}

// GetStageInFunnelOk returns a tuple with the StageInFunnel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGetReferralInfoResponse) GetStageInFunnelOk() (*string, bool) {
	if o == nil || o.StageInFunnel == nil {
		return nil, false
	}
	return o.StageInFunnel, true
}

// HasStageInFunnel returns a boolean if a field has been set.
func (o *UserGetReferralInfoResponse) HasStageInFunnel() bool {
	if o != nil && o.StageInFunnel != nil {
		return true
	}

	return false
}

// SetStageInFunnel gets a reference to the given string and assigns it to the StageInFunnel field.
func (o *UserGetReferralInfoResponse) SetStageInFunnel(v string) {
	o.StageInFunnel = &v
}

func (o UserGetReferralInfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EligibleToRefer != nil {
		toSerialize["eligible_to_refer"] = o.EligibleToRefer
	}
	if o.NumContractsTraded != nil {
		toSerialize["num_contracts_traded"] = o.NumContractsTraded
	}
	if o.PeopleReferred != nil {
		toSerialize["people_referred"] = o.PeopleReferred
	}
	if o.ReferralCode != nil {
		toSerialize["referral_code"] = o.ReferralCode
	}
	if o.ReferralId != nil {
		toSerialize["referral_id"] = o.ReferralId
	}
	if o.ReferralMoneyRewarded != nil {
		toSerialize["referral_money_rewarded"] = o.ReferralMoneyRewarded
	}
	if o.StageInFunnel != nil {
		toSerialize["stage_in_funnel"] = o.StageInFunnel
	}
	return json.Marshal(toSerialize)
}

type NullableUserGetReferralInfoResponse struct {
	value *UserGetReferralInfoResponse
	isSet bool
}

func (v NullableUserGetReferralInfoResponse) Get() *UserGetReferralInfoResponse {
	return v.value
}

func (v *NullableUserGetReferralInfoResponse) Set(val *UserGetReferralInfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserGetReferralInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserGetReferralInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserGetReferralInfoResponse(val *UserGetReferralInfoResponse) *NullableUserGetReferralInfoResponse {
	return &NullableUserGetReferralInfoResponse{value: val, isSet: true}
}

func (v NullableUserGetReferralInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserGetReferralInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



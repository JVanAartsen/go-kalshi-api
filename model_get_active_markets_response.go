/*
Kalshi API.

This documentation describes Kalshi's REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kalshiAPI

import (
	"encoding/json"
)

// GetActiveMarketsResponse struct for GetActiveMarketsResponse
type GetActiveMarketsResponse struct {
	ActiveMarkets []MarketActivity `json:"active_markets,omitempty"`
}

// NewGetActiveMarketsResponse instantiates a new GetActiveMarketsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetActiveMarketsResponse() *GetActiveMarketsResponse {
	this := GetActiveMarketsResponse{}
	return &this
}

// NewGetActiveMarketsResponseWithDefaults instantiates a new GetActiveMarketsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetActiveMarketsResponseWithDefaults() *GetActiveMarketsResponse {
	this := GetActiveMarketsResponse{}
	return &this
}

// GetActiveMarkets returns the ActiveMarkets field value if set, zero value otherwise.
func (o *GetActiveMarketsResponse) GetActiveMarkets() []MarketActivity {
	if o == nil || o.ActiveMarkets == nil {
		var ret []MarketActivity
		return ret
	}
	return o.ActiveMarkets
}

// GetActiveMarketsOk returns a tuple with the ActiveMarkets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetActiveMarketsResponse) GetActiveMarketsOk() ([]MarketActivity, bool) {
	if o == nil || o.ActiveMarkets == nil {
		return nil, false
	}
	return o.ActiveMarkets, true
}

// HasActiveMarkets returns a boolean if a field has been set.
func (o *GetActiveMarketsResponse) HasActiveMarkets() bool {
	if o != nil && o.ActiveMarkets != nil {
		return true
	}

	return false
}

// SetActiveMarkets gets a reference to the given []MarketActivity and assigns it to the ActiveMarkets field.
func (o *GetActiveMarketsResponse) SetActiveMarkets(v []MarketActivity) {
	o.ActiveMarkets = v
}

func (o GetActiveMarketsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ActiveMarkets != nil {
		toSerialize["active_markets"] = o.ActiveMarkets
	}
	return json.Marshal(toSerialize)
}

type NullableGetActiveMarketsResponse struct {
	value *GetActiveMarketsResponse
	isSet bool
}

func (v NullableGetActiveMarketsResponse) Get() *GetActiveMarketsResponse {
	return v.value
}

func (v *NullableGetActiveMarketsResponse) Set(val *GetActiveMarketsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetActiveMarketsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetActiveMarketsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetActiveMarketsResponse(val *GetActiveMarketsResponse) *NullableGetActiveMarketsResponse {
	return &NullableGetActiveMarketsResponse{value: val, isSet: true}
}

func (v NullableGetActiveMarketsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetActiveMarketsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Kalshi API.

This documentation describes Kalshi's REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kalshiAPI

import (
	"encoding/json"
	"time"
)

// UserTrade Represents a trade from the user perspective.  A trade is created whenever an order is fully or partially matched, so there can be multiple trades with the same order_id. It is guaranteed that the sum of the count field for all the trades with the same order_id field shouldn't exceed the place_count on the order.
type UserTrade struct {
	Count *int32 `json:"count,omitempty"`
	CreateDate *time.Time `json:"create_date,omitempty"`
	Id *string `json:"id,omitempty"`
	IsTaker *bool `json:"is_taker,omitempty"`
	IsYes *bool `json:"is_yes,omitempty"`
	MarketId *string `json:"market_id,omitempty"`
	OrderId *string `json:"order_id,omitempty"`
	Price *int64 `json:"price,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewUserTrade instantiates a new UserTrade object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserTrade() *UserTrade {
	this := UserTrade{}
	return &this
}

// NewUserTradeWithDefaults instantiates a new UserTrade object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserTradeWithDefaults() *UserTrade {
	this := UserTrade{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *UserTrade) GetCount() int32 {
	if o == nil || o.Count == nil {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTrade) GetCountOk() (*int32, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *UserTrade) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *UserTrade) SetCount(v int32) {
	o.Count = &v
}

// GetCreateDate returns the CreateDate field value if set, zero value otherwise.
func (o *UserTrade) GetCreateDate() time.Time {
	if o == nil || o.CreateDate == nil {
		var ret time.Time
		return ret
	}
	return *o.CreateDate
}

// GetCreateDateOk returns a tuple with the CreateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTrade) GetCreateDateOk() (*time.Time, bool) {
	if o == nil || o.CreateDate == nil {
		return nil, false
	}
	return o.CreateDate, true
}

// HasCreateDate returns a boolean if a field has been set.
func (o *UserTrade) HasCreateDate() bool {
	if o != nil && o.CreateDate != nil {
		return true
	}

	return false
}

// SetCreateDate gets a reference to the given time.Time and assigns it to the CreateDate field.
func (o *UserTrade) SetCreateDate(v time.Time) {
	o.CreateDate = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserTrade) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTrade) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserTrade) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UserTrade) SetId(v string) {
	o.Id = &v
}

// GetIsTaker returns the IsTaker field value if set, zero value otherwise.
func (o *UserTrade) GetIsTaker() bool {
	if o == nil || o.IsTaker == nil {
		var ret bool
		return ret
	}
	return *o.IsTaker
}

// GetIsTakerOk returns a tuple with the IsTaker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTrade) GetIsTakerOk() (*bool, bool) {
	if o == nil || o.IsTaker == nil {
		return nil, false
	}
	return o.IsTaker, true
}

// HasIsTaker returns a boolean if a field has been set.
func (o *UserTrade) HasIsTaker() bool {
	if o != nil && o.IsTaker != nil {
		return true
	}

	return false
}

// SetIsTaker gets a reference to the given bool and assigns it to the IsTaker field.
func (o *UserTrade) SetIsTaker(v bool) {
	o.IsTaker = &v
}

// GetIsYes returns the IsYes field value if set, zero value otherwise.
func (o *UserTrade) GetIsYes() bool {
	if o == nil || o.IsYes == nil {
		var ret bool
		return ret
	}
	return *o.IsYes
}

// GetIsYesOk returns a tuple with the IsYes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTrade) GetIsYesOk() (*bool, bool) {
	if o == nil || o.IsYes == nil {
		return nil, false
	}
	return o.IsYes, true
}

// HasIsYes returns a boolean if a field has been set.
func (o *UserTrade) HasIsYes() bool {
	if o != nil && o.IsYes != nil {
		return true
	}

	return false
}

// SetIsYes gets a reference to the given bool and assigns it to the IsYes field.
func (o *UserTrade) SetIsYes(v bool) {
	o.IsYes = &v
}

// GetMarketId returns the MarketId field value if set, zero value otherwise.
func (o *UserTrade) GetMarketId() string {
	if o == nil || o.MarketId == nil {
		var ret string
		return ret
	}
	return *o.MarketId
}

// GetMarketIdOk returns a tuple with the MarketId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTrade) GetMarketIdOk() (*string, bool) {
	if o == nil || o.MarketId == nil {
		return nil, false
	}
	return o.MarketId, true
}

// HasMarketId returns a boolean if a field has been set.
func (o *UserTrade) HasMarketId() bool {
	if o != nil && o.MarketId != nil {
		return true
	}

	return false
}

// SetMarketId gets a reference to the given string and assigns it to the MarketId field.
func (o *UserTrade) SetMarketId(v string) {
	o.MarketId = &v
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *UserTrade) GetOrderId() string {
	if o == nil || o.OrderId == nil {
		var ret string
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTrade) GetOrderIdOk() (*string, bool) {
	if o == nil || o.OrderId == nil {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *UserTrade) HasOrderId() bool {
	if o != nil && o.OrderId != nil {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given string and assigns it to the OrderId field.
func (o *UserTrade) SetOrderId(v string) {
	o.OrderId = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *UserTrade) GetPrice() int64 {
	if o == nil || o.Price == nil {
		var ret int64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTrade) GetPriceOk() (*int64, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *UserTrade) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given int64 and assigns it to the Price field.
func (o *UserTrade) SetPrice(v int64) {
	o.Price = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *UserTrade) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTrade) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *UserTrade) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *UserTrade) SetStatus(v string) {
	o.Status = &v
}

func (o UserTrade) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.CreateDate != nil {
		toSerialize["create_date"] = o.CreateDate
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IsTaker != nil {
		toSerialize["is_taker"] = o.IsTaker
	}
	if o.IsYes != nil {
		toSerialize["is_yes"] = o.IsYes
	}
	if o.MarketId != nil {
		toSerialize["market_id"] = o.MarketId
	}
	if o.OrderId != nil {
		toSerialize["order_id"] = o.OrderId
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableUserTrade struct {
	value *UserTrade
	isSet bool
}

func (v NullableUserTrade) Get() *UserTrade {
	return v.value
}

func (v *NullableUserTrade) Set(val *UserTrade) {
	v.value = val
	v.isSet = true
}

func (v NullableUserTrade) IsSet() bool {
	return v.isSet
}

func (v *NullableUserTrade) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserTrade(val *UserTrade) *NullableUserTrade {
	return &NullableUserTrade{value: val, isSet: true}
}

func (v NullableUserTrade) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserTrade) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



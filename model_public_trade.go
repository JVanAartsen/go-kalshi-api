/*
Kalshi API.

This documentation describes Kalshi's REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kalshiAPI

import (
	"encoding/json"
	"time"
)

// PublicTrade Represents a trade that can be displayed publicly. This does not include maker and taker information.  A trade is created whenever an order is fully or partially matched.
type PublicTrade struct {
	Count *int32 `json:"count,omitempty"`
	CreateDate *time.Time `json:"create_date,omitempty"`
	MarketId *string `json:"market_id,omitempty"`
	Price *int64 `json:"price,omitempty"`
	TradeId *string `json:"trade_id,omitempty"`
}

// NewPublicTrade instantiates a new PublicTrade object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicTrade() *PublicTrade {
	this := PublicTrade{}
	return &this
}

// NewPublicTradeWithDefaults instantiates a new PublicTrade object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicTradeWithDefaults() *PublicTrade {
	this := PublicTrade{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *PublicTrade) GetCount() int32 {
	if o == nil || o.Count == nil {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicTrade) GetCountOk() (*int32, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *PublicTrade) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *PublicTrade) SetCount(v int32) {
	o.Count = &v
}

// GetCreateDate returns the CreateDate field value if set, zero value otherwise.
func (o *PublicTrade) GetCreateDate() time.Time {
	if o == nil || o.CreateDate == nil {
		var ret time.Time
		return ret
	}
	return *o.CreateDate
}

// GetCreateDateOk returns a tuple with the CreateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicTrade) GetCreateDateOk() (*time.Time, bool) {
	if o == nil || o.CreateDate == nil {
		return nil, false
	}
	return o.CreateDate, true
}

// HasCreateDate returns a boolean if a field has been set.
func (o *PublicTrade) HasCreateDate() bool {
	if o != nil && o.CreateDate != nil {
		return true
	}

	return false
}

// SetCreateDate gets a reference to the given time.Time and assigns it to the CreateDate field.
func (o *PublicTrade) SetCreateDate(v time.Time) {
	o.CreateDate = &v
}

// GetMarketId returns the MarketId field value if set, zero value otherwise.
func (o *PublicTrade) GetMarketId() string {
	if o == nil || o.MarketId == nil {
		var ret string
		return ret
	}
	return *o.MarketId
}

// GetMarketIdOk returns a tuple with the MarketId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicTrade) GetMarketIdOk() (*string, bool) {
	if o == nil || o.MarketId == nil {
		return nil, false
	}
	return o.MarketId, true
}

// HasMarketId returns a boolean if a field has been set.
func (o *PublicTrade) HasMarketId() bool {
	if o != nil && o.MarketId != nil {
		return true
	}

	return false
}

// SetMarketId gets a reference to the given string and assigns it to the MarketId field.
func (o *PublicTrade) SetMarketId(v string) {
	o.MarketId = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *PublicTrade) GetPrice() int64 {
	if o == nil || o.Price == nil {
		var ret int64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicTrade) GetPriceOk() (*int64, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *PublicTrade) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given int64 and assigns it to the Price field.
func (o *PublicTrade) SetPrice(v int64) {
	o.Price = &v
}

// GetTradeId returns the TradeId field value if set, zero value otherwise.
func (o *PublicTrade) GetTradeId() string {
	if o == nil || o.TradeId == nil {
		var ret string
		return ret
	}
	return *o.TradeId
}

// GetTradeIdOk returns a tuple with the TradeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicTrade) GetTradeIdOk() (*string, bool) {
	if o == nil || o.TradeId == nil {
		return nil, false
	}
	return o.TradeId, true
}

// HasTradeId returns a boolean if a field has been set.
func (o *PublicTrade) HasTradeId() bool {
	if o != nil && o.TradeId != nil {
		return true
	}

	return false
}

// SetTradeId gets a reference to the given string and assigns it to the TradeId field.
func (o *PublicTrade) SetTradeId(v string) {
	o.TradeId = &v
}

func (o PublicTrade) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.CreateDate != nil {
		toSerialize["create_date"] = o.CreateDate
	}
	if o.MarketId != nil {
		toSerialize["market_id"] = o.MarketId
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.TradeId != nil {
		toSerialize["trade_id"] = o.TradeId
	}
	return json.Marshal(toSerialize)
}

type NullablePublicTrade struct {
	value *PublicTrade
	isSet bool
}

func (v NullablePublicTrade) Get() *PublicTrade {
	return v.value
}

func (v *NullablePublicTrade) Set(val *PublicTrade) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicTrade) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicTrade) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicTrade(val *PublicTrade) *NullablePublicTrade {
	return &NullablePublicTrade{value: val, isSet: true}
}

func (v NullablePublicTrade) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicTrade) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


